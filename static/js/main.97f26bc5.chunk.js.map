{"version":3,"sources":["api/mockAPI/data.js","api/mockAPI/utils.js","api/mockAPI/sessions.js","api/mockAPI/position_templates.js","api/mockAPI/positions.js","api/mockAPI/instructors.js","api/mockAPI/assignments.js","api/mockAPI/applicants.js","api/mockAPI/applications.js","api/mockAPI/index.js","api/defs/prop-types.js","api/defs/doc-generation.js","views/globals/actions.js","components/mockAPI.js","api/actions/errors.js","api/actions/status.js","api/constants/index.js","api/actions/utils.js","libs/apiUtils.js","api/reducers/utils.js","api/reducers/sessions.js","api/actions/sessions.js","api/reducers/positions.js","api/reducers/instructors.js","api/actions/instructors.js","api/actions/positions.js","api/reducers/applicants.js","api/actions/applicants.js","api/reducers/assignments.js","api/actions/assignments.js","api/reducers/applications.js","api/actions/applications.js","api/reducers/position_templates.js","api/actions/position_templates.js","views/dev_frame/index.js","libs/urlUtils.js","views/notificatons/index.js","views/offertable/actions.js","components/filterable-menu.js","components/sessions.js","components/forms/common-controls.js","components/forms/session-editor.js","components/applicants-list.js","components/postition-templates-list.js","components/instructors.js","components/edit-field-widgets.js","views/instructors/editable-instructors-list.js","libs/utils.js","views/instructors/add-instructor-dialog.js","views/instructors/index.js","components/positions-list.js","components/search-box.js","libs/fileManager.js","components/import-button.js","components/offer-table.js","views/offertable/index.js","views/offertable/constants.js","components/forms/position-editor.js","components/forms/assignment-editor.js","views/dashboard/index.js","components/assignments-list.js","components/email-button.js","views/sessions/session-select.js","views/sessions/add-session-dialog.js","views/sessions/index.js","views/cp_control_panel/ControlPanel.jsx","components/filtered-list.js","views/positions/add-position-dialog.js","views/positions/position-list.js","views/positions/index.js","views/assignments/add-assignment-dialog.js","views/assignments/index.js","views/routes/index.js","components/header.js","views/admin/header.js","App.jsx","views/offertable/reducers.js","views/globals/reducers.js","views/globals/constants.js","api/reducers/status.js","rootReducer.js","store.js","index.js"],"names":["mockData","sessions","id","start_date","end_date","name","rate1","rate2","available_position_templates","offer_template","position_templates_by_session","1","position_type","2","instructors","last_name","first_name","email","utorid","positions_by_session","positions","position_code","position_title","est_hours_per_assignment","est_start_date","est_end_date","duties","qualifications","ad_hours_per_assignment","ad_num_assignments","ad_open_date","ad_close_date","desired_num_assignments","current_enrollment","current_waitlisted","applicants","student_number","phone","assignments_by_session","assignments","position_id","applicant_id","hours","applications","comments","program","department","previous_uoft_ta_experience","yip","annotation","session_id","getUnusedId","data","prop","arguments","length","undefined","ids","map","x","filter","max","Math","apply","concat","Object","toConsumableArray","isNaN","round","random","find","obj","s","findAllById","includes","deleteInArray","splice","indexOf","getAttributesCheckMessage","props","required","unique","_i","_Object$entries","entries","_ref3","_ref2","slicedToArray","requirements","sessionsRoutes","get","/sessions","documentCallback","func","summary","returns","wrappedPropTypes","arrayOf","docApiPropTypes","session","post","params","body","matchingSession","assign","message","Error","newSession","_objectSpread","push","posts","/sessions/delete","idOnly","templatesRoutes","/available_position_templates","offerTemplateMinimal","/sessions/:session_id/position_templates","offerTemplate","/sessions/:session_id/add_position_template","position_templates","matchingTemplate","newTemplate","positionsRoutes","/sessions/:session_id/positions","position","matchingPosition","newId","newPosition","positions_objectSpread","/positions","/positions/delete","instructorsRoutes","/instructors","instructor","/positions/:position_id/instructors","matchingInstructor","newInstructor","instructors_objectSpread","/instructors/delete","/positions/:position_id/instructors/delete","assignmentsRoutes","/sessions/:session_id/assignments","assignment","/assignments/:assignment_id/active_offer","offer","/assignments","newAssignment","assignments_objectSpread","keys","applicantsRoutes","/sessions/:session_id/applicants","applicantIds","applicant","/applicants","/applicants/:applicant_id","newApplicant","applicants_objectSpread","applicationsRoutes","/sessions/:session_id/applications","application","/applications","newApplication","applications_objectSpread","MockAPI","seedData","_this","this","classCallCheck","routePrefix","getRoutes","/all_data","exclude","postRoutes","apiGET","url","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","_getRoutesParsers","Symbol","iterator","next","done","route","value","match","payload","spec","JSON","stringify","status","e","toString","err","apiPOST","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","_postRoutesParsers","active","routeStr","Route","createClass","key","_this2","delay","_origFetch","fetch","window","_ref","asyncToGenerator","regenerator_default","a","mark","_callee","init","parsedURL","mockResponse","responseObj","_args","wrap","_context","prev","URL","pathname","startsWith","replace","method","parse","console","log","Response","Blob","type","statusText","abrupt","Promise","resolve","setTimeout","stop","_x","mockAPI","generatePropTypes","PropTypes","apiResponse","shape","oneOf","isRequired","string","any","apiResponseSuccess","apiResponseError","oneOfType","number","contract_start","contract_end","note","offer_override_pdf","wageChunk","rate","reportingTags","position_start_date","position_end_date","first_time_ta","bool","instructor_contact_desc","pay_period_desc","installments","ta_coordinator_name","ta_coordinator_email","emailed_date","accepted_date","rejected_date","withdrawn_date","previous_uoft_experience","CallAtom","args","join","createCallChain","chain","propTypesProxy","callChain","Proxy","receiver","ret","Reflect","thisArg","lastProp","pop","ownKeys","PROPTYPES_TO_SWAGGER_TYPES","object","array","wrappedPropTypesToSwagger","pt","_pt$callChain","requiredList","swaggerVal","warn","wrapInStandardApiResponseForSwagger","properties","enum","urlTemplateToSwagger","parsed","RouteParser","templateVars","subs","_i2","_templateVars","templateVar","decodeURI","reverse","documentedCallbackToSwagger","docs","responses","default","parameters","in","description","content","application/json","schema","requestBody","mockApiRoutesAsSwaggerPaths","_mockAPI$getRoutes","_mockAPI$postRoutes","_i3","_Object$entries2","_ref10","_ref5","path","val","_urlTemplateToSwagger","templatePath","_i4","_Object$entries3","_ref11","_ref7","_urlTemplateToSwagger2","tags","Array","from","Set","split","_loop","_ref8","_Object$entries4","_i5","_ref9","info","applicableTags","sortedRet","sort","_ref12","_ref12$exclude","attrs","objectWithoutProperties","setGlobals","globals","location","searchParams","URLSearchParams","append","history","pushState","newurl","protocol","host","hash","replaceGlobalFetch","restoreGlobalFetch","setActive","state","_props$fetchSessions","fetchSessions","_props$_setActive","_setActive","ToggleMockApi","_React$useState","React","useState","_React$useState2","fullProps","useEffect","react_default","createElement","title","ButtonGroup","Button","variant","onClick","mock","require","connect","ui","defaultNotifProps","autoDismiss","fetchError","error","errors_objectSpread","upsertError","deleteError","apiError","apiInteractionStart","apiInteractionEnd","arrayToHash","l","indexBy","isArray","d","actionFactory","onActiveSessionChangeActions","runOnActiveSessionChange","action","Function","validatedApiDispatcher","dispatcher","propTypes","onErrorDispatch","_len","_key","dispatch","wasPropTypesError","propTypeCheck","i","statusId","arg","checkPropTypes","uuid","t0","finish","API_URL","FETCH_INIT","credentials","headers","Content-Type","ApiError","resp","errorMessage","possibleConstructorReturn","getPrototypeOf","call","captureStackTrace","assertThisInitialized","ApiFetchError","response","_ensurePath","_processFetchResponse","json","sent","apiUtils_objectSpread","_callee2","_context2","_callee3","_args3","_context3","upsertItem","modelData","newItem","didUpdate","newModelData","item","createBasicReducerObject","FETCH_MANY","FETCH_ONE","UPSERT_ONE","DELETE_ONE","defineProperty","utils_objectSpread","_modelData","deletedItem","createReducer","initialState","handlers","_storePath","pushToPath","dir","unshift","reducer","_origCreateReducer","_localStoreSelector","localState","createLocalStoreSelector","combineReducers","model","pushToPathCallbacks","_ref4","newReducer","_origCombineReducers","activeSession","sessionsReducer","sessions_objectSpread","fetchSessionsSuccess","fetchOneSessionSuccess","upsertOneSessionSuccess","setActiveSessionAction","getState","setActiveSession","_x2","upsertSession","_x3","_x4","forceChange","_callee5","promises","_context5","all","_x6","_x7","localStoreSelector","sessionsSelector","createSelector","activeSessionSelector","positionsReducer","positionId","instructorsReducer","fetchInstructorsSuccess","fetchOneInstructorSuccess","upsertOneInstructorSuccess","deleteOneInstructorSuccess","fetchInstructors","upsertInstructor","_callee4","_context4","instructorsSelector","fetchPositionsSuccess","fetchOnePositionSuccess","upsertPositionsSuccess","upsertOnePositionSuccess","deleteOnePositionSuccess","addInstructorToPositionSuccess","fetchPositions","activeSessionId","upsertPosition","_x5","_x8","_x9","_x10","_ref6","_callee6","_context6","_x11","_positionsSelector","positionsSelector","instructorsById","actions_positions_objectSpread","insertIfMissing","target","source","missingItems","some","applicantsReducer","fetchApplicantsSuccess","fetchOneApplicantSuccess","upsertOneApplicantSuccess","deleteOneApplicantSuccess","fetchApplicants","upsertApplicant","applicantsSelector","assignmentsReducer","fetchAssignmentsSuccess","fetchOneAssignmentSuccess","upsertOneAssignmentSuccess","deleteOneAssignmentSuccess","fetchAssignments","upsertAssignment","_assignmentsSelector","assignmentsSelector","applicationsReducer","fetchApplicationsSuccess","fetchOneApplicationSuccess","upsertOneApplicationSuccess","deleteOneApplicationSuccess","fetchApplications","positionTemplatesReducer","position_templates_objectSpread","fetchPositionTemplatesSuccess","fetchAllPositionTemplatesSuccess","fetchOnePositionTemplateSuccess","upsertOnePositionTemplateSuccess","deleteOnePositionTemplateSuccess","fetchPositionTemplates","positionTemplatesSelector","BootstrapNavLink","Nav","Link","as","NavLink","activeClassName","to","children","swaggerData","openapi","servers","paths","dev_frame_objectSpread","ConnectedToggleMockApi","stringToNativeType","ConnectedNotifications","notifications","Notifications","offerTableSelector","offerTable","FilterableMenuContents","forwardRef","ref","style","className","clearFilter","setFilter","sessionList","Children","toArray","child","trim","toLowerCase","emptyListMessage","FormControl","autoFocus","placeholder","onChange","currentTarget","tabIndex","FilterableMenu","items","activeItemId","Dropdown","Menu","index","Item","eventKey","SessionSelect","dropdownVisible","setDropdownVisible","label","onSelect","onToggle","desiredVisibility","show","Toggle","fieldEditorFactory","boundData","setBoundData","setAttrFactory","attr","coerceFunc","newVal","newData","common_controls_objectSpread","inputAttrs","valueFunc","Number","Date","toISOString","slice","Fragment","Form","Label","Control","DialogRow","Row","alignItems","Group","Col","SessionEditor","createFieldEditor","setSession","step","min","ApplicantsList","_React$Component","inherits","applicantsList","Component","PositionTemplatesList","templateList","template","DEFAULT_COLUMNS","Header","accessor","InstructorsList","_props$columns","columns","react_table_es","showPagination","minRows","DEFAULT_INSTRUCTOR","InstructorEditor","instructorProps","setInstructor","EditFieldDialog","onHide","fieldVal","setFieldVal","cancelClick","changeIndicator","Modal","closeButton","Title","Body","Footer","EditFieldIcon","hidden","index_esm","EditableField","_props$editable","editable","_React$useState3","_React$useState4","dialogShow","setDialogShow","EditableCell","column","field","applicantId","original","ConnectedInstructorsList","rest","generateCell","Cell","strip","BLANK_INSTRUCTOR","ConnectedAddInstructorDialog","_props$onHide","setNewInstructor","conflicts","delayShow","immediateShow","getConficts","Alert","disabled","AdminIstructorsView","addDialogVisible","setAddDialogVisible","Badge","PositionsList","SearchBox","filters","event","input","v","setState","nextProps","bind","readFile","component","loadDataFunc","files","reader","FileReader","importFunc","importChoices","readAsText","onload","result","optSuccess","success","file","getExtension","extension","ImportButton","uploadFunc","_useState","_useState2","_useState3","_useState4","dialogContents","_useState5","_useState6","dialogOpen","setDialogOpen","handleClose","DropdownButton","accept","display","htmlFor","SelectTable","selectTableHOC","ReactTable","COLUMNS","width","backgroundColor","toUpperCase","OfferTable","selected","setSelected","_selected","_setSelected","filterString","setFilterString","lastSelected","setLastSelected","_React$useState5","_React$useState6","allSelected","setAllSelected","filteredData","row","values","rowToStr","reactTableRef","useRef","getDisplayedData","getWrappedInstance","getResolvedState","sortedData","_original","displayedData","every","has","tableComponent","r","toggleSelection","onToggleRow","shiftOn","rowIds","lastSelectedIndex","selectedIndex","start","end","newSelectedState","newSelected","add","selectAll","toggleAll","isSelected","selectType","keyField","ApplicantCell","AssignmentCell","applicationId","ConnectedOfferTable","selectedAssignmentIds","generateApplicantCell","DEFAULT_POSITION","PositionEditor","positionProp","setPosition","_props$instructors","position_editor_objectSpread","lib","ignoreDiacritics","multiple","labelKey","option","options","DEFAULT_ASSIGNMENT","AssignmentEditor","assignmentProp","setAssignment","assignment_editor_objectSpread","mapDispatchToProps","ConnectedSessionSelect","ConnectedApplicantList","ConnectedPositionTemplateList","ConnectedPositionsList","ConnectedAssignmentsList","assignmentsList","ConnectedSearchBox","ConnectedEmailButton","emailHandler","emailContract","nagOffers","ConnectedPositionEditor","ConnectedAssignmentEditor","DashboardWidget","margin","color","fontFamily","border","padding","Dashboard","_React$useState7","_React$useState8","BLANK_SESSION","ConnectedAddSessionDialog","setNewSession","AdminSessionsView","session_select_ConnectedSessionSelect","ConnectedFilteredList","ownProps","listRenderer","filterFunc","Renderer","query","setQuery","ControlPanel","BLANK_POSITION","ConnectedAddPositionDialog","setNewPosition","AdminPositionsView","position_list_ConnectedPositionsList","BLANK_ASSIGNMENT","ConnectedAddAssignmentDialog","setNewAssignment","AdminAssignmentsView","AdminRoutes","react_router","exact","dashboard","cp_control_panel_ControlPanel","_props$routes","routes","Navbar","bg","Brand","NavDropdown","header_BootstrapNavLink","subroutes","subroute","fullroute","AdminHeader","App","newGlobals","parseURLSearchString","search","App_objectSpread","ConnectedApp","offerTableReducer","reducers_objectSpread","globalReducer","globals_reducers_objectSpread","ongoingInteraction","ongoingInteractionsList","_createReducer","status_objectSpread","positionTemplates","notificationReducer","form","formReducer","persistConfig","storage","whitelist","persistedReducer","persistReducer","rootReducer","store","createStore","composeWithDevTools","applyMiddleware","thunk","persistor","persistStore","configureStore","DevFrame","expand","href","Collapse","swagger_ui_react_default","docExpansion","ReactDOM","render","react_router_dom","es","src_DevFrame","integration_react","document","getElementById"],"mappings":"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","file":"static/js/main.97f26bc5.chunk.js","sourcesContent":["export const mockData = {\n    sessions: [\n        {\n            id: 1,\n            start_date: \"2019-09-08T00:00:00.000Z\",\n            end_date: \"2019-12-31T00:00:00.000Z\",\n            name: \"2019 Fall\",\n            rate1: 45.55,\n            rate2: 47.33\n        },\n        {\n            id: 2,\n            start_date: \"2020-01-01T00:00:00.000Z\",\n            end_date: \"2020-04-30T00:00:00.000Z\",\n            name: \"2021 Spring\",\n            rate1: 45.55,\n            rate2: null\n        }\n    ],\n    available_position_templates: [\n        { offer_template: \"/math/default.html\" },\n        { offer_template: \"/math/default2018.html\" },\n        { offer_template: \"/math/invigilate.html\" },\n        { offer_template: \"/math/invigilate2014.html\" },\n        { offer_template: \"/math/oto.html\" }\n    ],\n    position_templates_by_session: {\n        1: [\n            {\n                id: 1,\n                position_type: \"standard\",\n                offer_template: \"/math/default.html\"\n            },\n            { id: 2, position_type: \"oto\", offer_template: \"/math/oto.html\" }\n        ],\n        2: [\n            {\n                id: 3,\n                position_type: \"standard\",\n                offer_template: \"/math/default2018.html\"\n            },\n            {\n                id: 4,\n                position_type: \"invigilate\",\n                offer_template: \"/math/invigilate.html\"\n            }\n        ]\n    },\n    instructors: [\n        {\n            id: 1000,\n            last_name: \"Smith\",\n            first_name: \"Henry\",\n            email: \"hery.smith@utoronto.ca\",\n            utorid: \"smithh\"\n        },\n        {\n            id: 1001,\n            last_name: \"Garcia\",\n            first_name: \"Emily\",\n            email: \"emily.garcia@utoronto.ca\",\n            utorid: \"garciae\"\n        },\n        {\n            id: 1002,\n            last_name: \"Miller\",\n            first_name: \"Megan\",\n            email: \"megan.miller@utoronto.ca\",\n            utorid: \"millerm\"\n        },\n        {\n            id: 1003,\n            last_name: \"Beera\",\n            first_name: \"Lizzy\",\n            email: \"lizzy.beera@utoronto.ca\",\n            utorid: \"beeral\"\n        }\n    ],\n    positions_by_session: {\n        1: [10, 11],\n        2: [12, 13]\n    },\n    positions: [\n        {\n            id: 10,\n            position_code: \"MAT135H1F\",\n            position_title: \"Calculus I\",\n            est_hours_per_assignment: 70,\n            est_start_date: \"2019-09-08T00:00:00.000Z\",\n            est_end_date: \"2019-12-31T00:00:00.000Z\",\n            position_type: \"standard\",\n            duties: \"Tutorials\",\n            qualifications: \"Teaching skill\",\n            ad_hours_per_assignment: 70,\n            ad_num_assignments: 15,\n            ad_open_date: \"2019-08-01T00:00:00.000Z\",\n            ad_close_date: \"2019-08-15T00:00:00.000Z\",\n            desired_num_assignments: 15,\n            current_enrollment: 1200,\n            current_waitlisted: 200,\n            instructors: [{ id: 1000 }, { id: 1001 }]\n        },\n        {\n            id: 11,\n            position_code: \"MAT136H1F\",\n            position_title: \"Calculus II\",\n            est_hours_per_assignment: 70,\n            est_start_date: \"2019-09-08T00:00:00.000Z\",\n            est_end_date: \"2019-12-31T00:00:00.000Z\",\n            position_type: \"invigilation\",\n            instructors: []\n        },\n        {\n            id: 12,\n            position_code: \"CSC135H1F\",\n            position_title: \"Computer Fun\",\n            est_hours_per_assignment: 70,\n            est_start_date: \"2019-09-08T00:00:00.000Z\",\n            est_end_date: \"2019-12-31T00:00:00.000Z\",\n            position_type: \"standard\",\n            duties: \"Tutorials\",\n            instructors: [{ id: 1000 }]\n        },\n        {\n            id: 13,\n            position_code: \"MAT235H1F\",\n            position_title: \"Calculus III\",\n            est_hours_per_assignment: 70,\n            est_start_date: \"2019-09-08T00:00:00.000Z\",\n            est_end_date: \"2019-12-31T00:00:00.000Z\",\n            position_type: \"invigilation\",\n            instructors: [{ id: 1002 }]\n        }\n    ],\n    applicants: [\n        {\n            id: 2000,\n            utorid: \"weasleyr\",\n            student_number: \"89013443\",\n            first_name: \"Ron\",\n            last_name: \"Weasley\",\n            email: \"ron@potter.com\",\n            phone: \"543-223-9993\"\n        },\n        {\n            id: 2001,\n            utorid: \"potterh\",\n            student_number: \"999666999\",\n            first_name: \"Harry\",\n            last_name: \"Potter\",\n            email: \"harry@potter.com\"\n        },\n        {\n            id: 2002,\n            utorid: \"smithb\",\n            email: \"smithb@mail.utoronto.ca\",\n            first_name: \"Bethany\",\n            last_name: \"Smith\",\n            student_number: \"131382748\"\n        },\n        {\n            id: 2003,\n            utorid: \"wilsonh\",\n            email: \"wilsonh@mail.utoronto.ca\",\n            first_name: \"Hanna\",\n            last_name: \"Wilson\",\n            student_number: \"600366904\"\n        },\n        {\n            id: 2004,\n            utorid: \"molinat\",\n            email: \"molinat@mail.utoronto.ca\",\n            first_name: \"Troy\",\n            last_name: \"Molina\",\n            student_number: \"328333023\"\n        },\n        {\n            id: 2005,\n            utorid: \"howeyb\",\n            email: \"howeyb@mail.utoronto.ca\",\n            first_name: \"Brett\",\n            last_name: \"Howey\",\n            student_number: \"329613524\"\n        },\n        {\n            id: 2006,\n            utorid: \"brownd\",\n            email: \"brownd@mail.utoronto.ca\",\n            first_name: \"David\",\n            last_name: \"Brown\",\n            student_number: \"29151485\"\n        }\n    ],\n    assignments_by_session: { 1: [100, 101], 2: [] },\n    assignments: [\n        {\n            id: 100,\n            position_id: 10,\n            applicant_id: 2001,\n            hours: 90\n        },\n        {\n            id: 101,\n            position_id: 10,\n            applicant_id: 2005,\n            hours: 95\n        }\n    ],\n    applications: [\n        {\n            comments: \"\",\n            program: \"Phd\",\n            department: \"Computer Science\",\n            previous_uoft_ta_experience: \"Last year I TAed a bunch\",\n            yip: 2,\n            annotation: \"\",\n            session_id: 1,\n            applicant_id: 2000\n        },\n        {\n            comments: \"\",\n            program: \"UG\",\n            department: \"Computer Science\",\n            previous_uoft_ta_experience: \"\",\n            yip: 2,\n            annotation: \"\",\n            session_id: 1,\n            applicant_id: 2001\n        },\n        {\n            comments: \"\",\n            program: \"Phd\",\n            department: \"Math\",\n            previous_uoft_ta_experience: \"\",\n            yip: 2,\n            annotation: \"\",\n            session_id: 1,\n            applicant_id: 2002\n        },\n        {\n            comments: \"\",\n            program: \"Phd\",\n            department: \"Computer Science\",\n            previous_uoft_ta_experience: \"\",\n            yip: 2,\n            annotation: \"\",\n            session_id: 1,\n            applicant_id: 2005\n        },\n        {\n            comments: \"\",\n            program: \"UG\",\n            department: \"Computer Science\",\n            previous_uoft_ta_experience: \"\",\n            yip: 2,\n            annotation: \"\",\n            session_id: 1,\n            applicant_id: 2006\n        },\n        {\n            comments: \"\",\n            program: \"UG\",\n            department: \"Math\",\n            previous_uoft_ta_experience: \"\",\n            yip: 3,\n            annotation: \"\",\n            session_id: 2,\n            applicant_id: 2002\n        },\n        {\n            comments: \"\",\n            program: \"MSc\",\n            department: \"Computer Science\",\n            previous_uoft_ta_experience: \"\",\n            yip: 2,\n            annotation: \"\",\n            session_id: 2,\n            applicant_id: 2003\n        },\n        {\n            comments: \"\",\n            program: \"UG\",\n            department: \"Computer Science\",\n            previous_uoft_ta_experience: \"\",\n            yip: 4,\n            annotation: \"\",\n            session_id: 2,\n            applicant_id: 2004\n        }\n    ]\n};\n","/**\n * A collection of untility functions to help with the mock API\n */\n\n/**\n * Generates an unused Id based on the `prop` attribute.\n *\n * @export\n * @param {object[]} data - array of data with `prop` attributes\n * @param {string} [prop=\"id\"] - attribute to key on\n * @returns {number|string}\n */\nexport function getUnusedId(data, prop = \"id\") {\n    const ids = data.map(x => +x[prop]).filter(x => x != null);\n    const max = Math.max(0, ...ids);\n    if (isNaN(max)) {\n        // Somehow there was some other type mixed in with the ids. In this case,\n        // generate a random string\n        return \"id-\" + Math.round(Math.random() * 10000);\n    }\n    return max + 1;\n}\n\n/**\n * Find `obj` in `data` based on a matching attribute of `prop`.\n * Returns matching object or `undefined` if no match was found.\n *\n * @export\n * @param {*} obj\n * @param {*} [data=[]]\n * @param {string} [prop=\"id\"]\n * @returns {undefined|object}\n */\nexport function find(obj, data = [], prop = \"id\") {\n    // We really do want to use `==` and not `===` here.\n    // Sometimes ids are given as ints and sometimes as strings;\n    // we should work interchangibly with both.\n    // eslint-disable-next-line\n    return data.find(s => s[prop] == obj[prop]);\n}\n\n/**\n * Filter `data` to be a list which only includes items\n * with ids listed in `ids`.\n *\n * @export\n * @param {*} [ids=[]]\n * @param {*} [data=[]]\n * @param {string} [prop=\"id\"]\n * @returns {object[]}\n */\nexport function findAllById(ids = [], data = [], prop = \"id\") {\n    // ids can be numbers or strings; make sure we get a match in either case.\n    ids = ids.map(x => \"\" + x);\n    return data.filter(x => ids.includes(\"\" + x[prop]));\n}\n\n/**\n * Delete the first occurance of `obj` in `data`\n *\n * @export\n * @param {*} obj\n * @param {*} [data=[]]\n */\nexport function deleteInArray(obj, data = []) {\n    data.splice(data.indexOf(obj), 1);\n}\n\n/**\n * Verify whether attributes are nonempty/unique. If they fail these\n * checks, return an appropriate error message. If they pass, return `false`.\n *\n * @export\n * @param {object} obj\n * @param {object[]} [data=[]]\n * @param {boolean} [props={ id: { required: true, unique: true } }]\n * @returns {string|boolean} - `false` if all checks succeed. Otherwise an appropriate error message.\n */\nexport function getAttributesCheckMessage(\n    obj,\n    data = [],\n    props = { id: { required: true, unique: true } }\n) {\n    for (const [prop, requirements] of Object.entries(props)) {\n        // Required attributes cannot be null or the empty string\n        if (requirements.required && (obj[prop] == null || obj[prop] === \"\")) {\n            return `Property ${prop} cannot be empty`;\n        }\n        // Search the data for something with a matching prop. If we find\n        // anything, we are not unique\n        if (requirements.unique && find(obj, data, prop)) {\n            return `Duplicate entry exists for property ${prop} with value ${obj[prop]}`;\n        }\n    }\n    return false;\n}\n","import {\n    getUnusedId,\n    find,\n    getAttributesCheckMessage,\n    deleteInArray\n} from \"./utils\";\nimport {\n    documentCallback,\n    wrappedPropTypes,\n    docApiPropTypes\n} from \"../defs/doc-generation\";\n\nexport const sessionsRoutes = {\n    get: {\n        \"/sessions\": documentCallback({\n            func: data => [...data.sessions],\n            summary: \"Get all available sessions\",\n            returns: wrappedPropTypes.arrayOf(docApiPropTypes.session)\n        })\n    },\n    post: {\n        \"/sessions\": documentCallback({\n            func: (data, params, body) => {\n                // body should be a session object. If it contains an id,\n                // update an existing session. Otherwise, create a new one.\n                const matchingSession = find(body, data.sessions);\n                if (matchingSession) {\n                    return Object.assign(matchingSession, body);\n                }\n                // if we're here, we need to create a new session\n                // but check if the session name is empty or duplicate\n                const message = getAttributesCheckMessage(body, data.sessions, {\n                    name: { required: true, unique: true }\n                });\n                if (message) {\n                    throw new Error(message);\n                }\n                // create new session\n                const newId = getUnusedId(data.sessions);\n                const newSession = { ...body, id: newId };\n                data.sessions.push(newSession);\n                // If we insert a new session, we need to make sure we create\n                // a corresponding assignments_by_session array\n                data.assignments_by_session[newSession.id] = [];\n                return newSession;\n            },\n            summary: \"Upsert a session\",\n            returns: docApiPropTypes.session,\n            posts: docApiPropTypes.session\n        }),\n        \"/sessions/delete\": documentCallback({\n            func: (data, params, body) => {\n                const matchingSession = find(body, data.sessions);\n                if (!matchingSession) {\n                    throw new Error(\n                        `Could not find session with id=${body.id} to delete`\n                    );\n                }\n                deleteInArray(matchingSession, data.sessions);\n                // if we found the session with matching id, delete it.\n                return {};\n            },\n            summary: \"Delete a session\",\n            posts: docApiPropTypes.idOnly,\n            returns: docApiPropTypes.session\n        })\n    }\n};\n","import { find, getAttributesCheckMessage, getUnusedId } from \"./utils\";\nimport {\n    documentCallback,\n    wrappedPropTypes,\n    docApiPropTypes\n} from \"../defs/doc-generation\";\n\nexport const templatesRoutes = {\n    get: {\n        \"/available_position_templates\": documentCallback({\n            func: data => [...data.available_position_templates],\n            summary:\n                \"Get all available position templates (these are literal files on the server).\",\n            returns: wrappedPropTypes.arrayOf(\n                docApiPropTypes.offerTemplateMinimal\n            )\n        }),\n        \"/sessions/:session_id/position_templates\": documentCallback({\n            func: (data, params) => [\n                ...(data.position_templates_by_session[params.session_id] || [])\n            ],\n            summary: \"Get position templates associated with this session.\",\n            returns: wrappedPropTypes.arrayOf(docApiPropTypes.offerTemplate)\n        })\n    },\n    post: {\n        \"/sessions/:session_id/add_position_template\": documentCallback({\n            func: (data, params, body) => {\n                const { session_id } = params;\n                // Get the appropriate array; if it doesn't exist, initilize it\n                // to an empty array\n                const position_templates = (data.position_templates_by_session[\n                    session_id\n                ] = data.position_templates_by_session[session_id] || []);\n                const matchingTemplate = find(body, position_templates);\n                if (matchingTemplate) {\n                    return Object.assign(matchingTemplate, body);\n                }\n                const message = getAttributesCheckMessage(\n                    body,\n                    position_templates,\n                    {\n                        position_type: { required: true },\n                        offer_template: { required: true }\n                    }\n                );\n                if (message) {\n                    throw new Error(message);\n                }\n                // create new template\n                const newId = getUnusedId(position_templates);\n                const newTemplate = {\n                    id: newId,\n                    position_type: body.position_type,\n                    offer_template: body.offer_template\n                };\n                position_templates.push(newTemplate);\n                return position_templates;\n            },\n            summary: \"Associate a position template with a session\",\n            posts: docApiPropTypes.offerTemplate,\n            returns: wrappedPropTypes.arrayOf(docApiPropTypes.offerTemplate)\n        })\n    }\n};\n","import {\n    getUnusedId,\n    find,\n    getAttributesCheckMessage,\n    deleteInArray,\n    findAllById\n} from \"./utils\";\nimport {\n    documentCallback,\n    wrappedPropTypes,\n    docApiPropTypes\n} from \"../defs/doc-generation\";\n\nexport const positionsRoutes = {\n    get: {\n        \"/sessions/:session_id/positions\": documentCallback({\n            func: (data, params) =>\n                findAllById(\n                    data.positions_by_session[params.session_id],\n                    data.positions\n                ),\n            summary: \"Get positions associated with this session.\",\n            returns: wrappedPropTypes.arrayOf(docApiPropTypes.position)\n        })\n    },\n    post: {\n        \"/sessions/:session_id/positions\": documentCallback({\n            func: (data, params, body) => {\n                const { session_id } = params;\n                const positions = data.positions;\n                // Get the appropriate array; if it doesn't exist, initilize it\n                // to an empty array\n                const positions_by_session = (data.positions_by_session[\n                    session_id\n                ] = data.positions_by_session[session_id] || []);\n                // body should be a session object. If it contains an id,\n                // update an existing session. Otherwise, create a new one.\n                const matchingPosition = find(body, positions);\n                if (matchingPosition) {\n                    return Object.assign(matchingPosition, body);\n                }\n                // if we're here, we need to create a new session\n                // but check if the session name is empty or duplicate\n                const message = getAttributesCheckMessage(\n                    body,\n                    findAllById(positions_by_session, positions),\n                    {\n                        position_code: { required: true, unique: true }\n                    }\n                );\n                if (message) {\n                    throw new Error(message);\n                }\n                // create new session\n                const newId = getUnusedId(positions);\n                const newPosition = { ...body, id: newId };\n                positions.push(newPosition);\n                positions_by_session.push(newId);\n                return newPosition;\n            },\n            summary:\n                \"Upsert a position associated with a session. If a new position is created, it will be automatically associated with the given session\",\n            posts: docApiPropTypes.position,\n            returns: docApiPropTypes.position\n        }),\n        \"/positions\": documentCallback({\n            func: (data, params, body) => {\n                const positions = data.positions;\n                // body should be a session object. If it contains an id,\n                // update an existing session. Otherwise, create a new one.\n                const matchingPosition = find(body, positions);\n                if (matchingPosition) {\n                    return Object.assign(matchingPosition, body);\n                }\n                throw new Error(`Cannot find position with id=${body.id}`);\n            },\n            summary: \"Update a position\",\n            posts: docApiPropTypes.position,\n            returns: docApiPropTypes.position\n        }),\n        \"/positions/delete\": documentCallback({\n            func: (data, params, body) => {\n                const positions = data.positions;\n                // body should be a session object. If it contains an id,\n                // update an existing session. Otherwise, create a new one.\n                const matchingPosition = find(body, positions);\n                if (!matchingPosition) {\n                    throw new Error(`Cannot find position with id=${body.id}`);\n                }\n                deleteInArray(matchingPosition, positions);\n                return {};\n            },\n            summary: \"Delete a position\",\n            posts: docApiPropTypes.idOnly,\n            returns: docApiPropTypes.session\n        })\n    }\n};\n","import {\n    getUnusedId,\n    find,\n    getAttributesCheckMessage,\n    deleteInArray\n} from \"./utils\";\nimport {\n    documentCallback,\n    wrappedPropTypes,\n    docApiPropTypes\n} from \"../defs/doc-generation\";\n\nexport const instructorsRoutes = {\n    get: {\n        \"/instructors\": documentCallback({\n            func: data => data.instructors,\n            summary: \"Get a list of all instructors\",\n            returns: wrappedPropTypes.arrayOf(docApiPropTypes.instructor)\n        }),\n        \"/positions/:position_id/instructors\": documentCallback({\n            func: (data, params) => {\n                const { position_id } = params;\n                return [\n                    ...(data.positions[position_id] || { instructors: [] })\n                        .instructors\n                ];\n            },\n            summary: \"Get instructors associated with the current position\",\n            returns: wrappedPropTypes.arrayOf(docApiPropTypes.instructor)\n        })\n    },\n    post: {\n        \"/instructors\": documentCallback({\n            func: (data, params, body) => {\n                const instructors = data.instructors;\n                // body should be an instructor object. If it contains an id,\n                // update an existing instructor. Otherwise, create a new one.\n                const matchingInstructor = find(body, instructors);\n                if (matchingInstructor) {\n                    return Object.assign(matchingInstructor, body);\n                }\n\n                // if we're here, we need to create a new session\n                // but check if the session name is empty or duplicate\n                const message = getAttributesCheckMessage(body, instructors, {\n                    utorid: { required: true, unique: true },\n                    first_name: { required: true },\n                    last_name: { required: true }\n                });\n                if (message) {\n                    throw new Error(message);\n                }\n                const newId = getUnusedId(instructors);\n                const newInstructor = { ...body, id: newId };\n                instructors.push(newInstructor);\n                return newInstructor;\n            },\n            summary: \"Upsert an instructor\",\n            posts: docApiPropTypes.instructor,\n            returns: docApiPropTypes.instructor\n        }),\n        \"/instructors/delete\": documentCallback({\n            func: (data, params, body) => {\n                const instructors = data.instructors;\n                const matchingInstructor = find(body, instructors);\n                if (!matchingInstructor) {\n                    throw new Error(\n                        `Could not find instructor with id=${body.id} to delete`\n                    );\n                }\n                deleteInArray(matchingInstructor, instructors);\n                // if we found the session with matching id, delete it.\n                return body;\n            },\n            summary: \"Delete an instructor (removes from all positions)\",\n            posts: docApiPropTypes.idOnly,\n            returns: docApiPropTypes.instructor\n        }),\n        \"/positions/:position_id/instructors\": documentCallback({\n            func: (data, params, body) => {\n                const { position_id } = params;\n                const instructor = find(body, data.instructors);\n                if (!instructor) {\n                    throw new Error(\n                        `Cannot find instructor with id=${body.id}`\n                    );\n                }\n                const position = find({ id: position_id }, data.positions);\n                const instructors = (position.instructors =\n                    position.instructors || []);\n                instructors.push({ id: instructor.id });\n                return instructor;\n            },\n            summary: \"Associate an instructor with a position\",\n            posts: docApiPropTypes.idOnly,\n            returns: docApiPropTypes.instructor\n        }),\n        \"/positions/:position_id/instructors/delete\": documentCallback({\n            func: (data, params, body) => {\n                const { position_id } = params;\n                const instructor = find(body, data.instructors);\n                if (!instructor) {\n                    throw new Error(\n                        `Cannot find instructor with id=${body.id}`\n                    );\n                }\n                const position = find({ id: position_id }, data.positions);\n                const instructors = (position.instructors =\n                    position.instructors || []);\n                deleteInArray(instructor.utorid, instructors);\n                return { ...instructor };\n            },\n            summary: \"Remove an instructor from the specified position\",\n            posts: docApiPropTypes.idOnly,\n            returns: docApiPropTypes.instructor\n        })\n    }\n};\n","import {\n    documentCallback,\n    wrappedPropTypes,\n    docApiPropTypes\n} from \"../defs/doc-generation\";\nimport { find, getUnusedId, getAttributesCheckMessage } from \"./utils\";\n\nexport const assignmentsRoutes = {\n    get: {\n        \"/sessions/:session_id/assignments\": documentCallback({\n            func: (data, params) =>\n                data.assignments_by_session[params.session_id].map(id =>\n                    find({ id }, data.assignments)\n                ),\n            summary: \"Get assignments associated with a session\",\n            returns: wrappedPropTypes.arrayOf(docApiPropTypes.assignment)\n        }),\n        \"/assignments/:assignment_id/active_offer\": documentCallback({\n            // XXX impliment\n            func: () => ({}),\n            summary: \"Get the active offer associated with an assignment\",\n            returns: docApiPropTypes.offer\n        })\n    },\n    post: {\n        \"/assignments\": documentCallback({\n            func: (data, params, body) => {\n                const assignments = data.assignments;\n                const assignment = find(body, assignments);\n                if (assignment) {\n                    // update an existing assignment\n                    return Object.assign(assignment, body);\n                }\n                // create a new assignment\n                const message = getAttributesCheckMessage(body, assignments, {\n                    position_id: { required: true },\n                    applicant_id: { required: true }\n                });\n                if (message) {\n                    throw new Error(message);\n                }\n                const newId = getUnusedId(assignments);\n                const newAssignment = { ...body, id: newId };\n                // Add the assignment to the list of all applicants\n                assignments.push(newAssignment);\n                // Figure out what session it is assigned to and add it there too\n                const session_id = Object.keys(data.positions_by_session).find(\n                    x =>\n                        data.positions_by_session[x].includes(\n                            newAssignment.position_id\n                        )\n                );\n                if (session_id) {\n                    data.assignments_by_session[session_id].push(\n                        newAssignment.id\n                    );\n                }\n                return newAssignment;\n            },\n            summary: \"Upsert an assignment\",\n            returns: docApiPropTypes.assignment\n        })\n    }\n};\n","import {\n    find,\n    getUnusedId,\n    getAttributesCheckMessage,\n    findAllById\n} from \"./utils\";\nimport {\n    documentCallback,\n    wrappedPropTypes,\n    docApiPropTypes\n} from \"../defs/doc-generation\";\n\nexport const applicantsRoutes = {\n    get: {\n        \"/sessions/:session_id/applicants\": documentCallback({\n            func: (data, params) => {\n                const applicantIds = findAllById(\n                    [params.session_id],\n                    data.applications,\n                    \"session_id\"\n                ).map(x => x.applicant_id);\n                return findAllById(applicantIds, data.applicants);\n            },\n            summary: \"Get all applicants associated with the given session\",\n            returns: wrappedPropTypes.arrayOf(docApiPropTypes.applicant)\n        }),\n        \"/applicants\": documentCallback({\n            func: data => data.applicants,\n            summary: \"Get all applicants\",\n            returns: wrappedPropTypes.arrayOf(docApiPropTypes.applicant)\n        }),\n        \"/applicants/:applicant_id\": documentCallback({\n            func: (data, params) =>\n                find({ id: params.applicant_id }, data.applicants),\n            summary: \"Get an applicant\",\n            returns: wrappedPropTypes.arrayOf(docApiPropTypes.applicant)\n        })\n    },\n    post: {\n        \"/applicants\": documentCallback({\n            func: (data, params, body) => {\n                const applicants = data.applicants;\n                const applicant = find(body, applicants);\n                if (applicant) {\n                    // if we're here, we are updating an existing applicant\n                    return Object.assign(applicant, body);\n                }\n                // If there is no matching applicant, we need to create one\n                // and add it to the current session\n                const message = getAttributesCheckMessage(body, applicants, {\n                    utorid: { required: true, unique: true },\n                    first_name: { required: true },\n                    last_name: { required: true }\n                });\n                if (message) {\n                    throw new Error(message);\n                }\n                const newId = getUnusedId(applicants);\n                const newApplicant = { ...body, id: newId };\n                // Add the applicant to the list of all applicants\n                applicants.push(newApplicant);\n                return newApplicant;\n            },\n            summary: \"Upsert an applicant\",\n            posts: docApiPropTypes.applicant,\n            returns: docApiPropTypes.applicant\n        })\n    }\n};\n","import { find, getUnusedId, getAttributesCheckMessage } from \"./utils\";\nimport {\n    documentCallback,\n    wrappedPropTypes,\n    docApiPropTypes\n} from \"../defs/doc-generation\";\n\nexport const applicationsRoutes = {\n    get: {\n        \"/sessions/:session_id/applications\": documentCallback({\n            func: (data, params) =>\n                data.applications.filter(\n                    application =>\n                        \"\" + application.session_id === \"\" + params.session_id\n                ),\n            summary: \"Get all applications associated with the given session\",\n            returns: wrappedPropTypes.arrayOf(docApiPropTypes.application)\n        })\n    },\n    post: {\n        \"/applications\": documentCallback({\n            func: (data, params, body) => {\n                const applications = data.applications;\n                const application = find(body, applications);\n                if (application) {\n                    // if we're here, we are updating an existing applicant\n                    return Object.assign(application, body);\n                }\n                // If there is no matching applicant, we need to create one\n                // and add it to the current session\n                const message = getAttributesCheckMessage(body, applications, {\n                    session_id: { required: true },\n                    applicant_id: { required: true }\n                });\n                if (message) {\n                    throw new Error(message);\n                }\n                const newId = getUnusedId(applications);\n                const newApplication = { ...body, id: newId };\n                // Add the applicant to the list of all applicants\n                applications.push(newApplication);\n                return newApplication;\n            },\n            summary: \"Upsert an application\",\n            posts: docApiPropTypes.application,\n            returns: docApiPropTypes.application\n        })\n    }\n};\n","import Route from \"route-parser\";\nimport { mockData } from \"./data\";\nimport { sessionsRoutes } from \"./sessions\";\nimport { templatesRoutes } from \"./position_templates\";\nimport { positionsRoutes } from \"./positions\";\nimport { instructorsRoutes } from \"./instructors\";\nimport { documentCallback } from \"../defs/doc-generation\";\nimport { assignmentsRoutes } from \"./assignments\";\nimport { applicantsRoutes } from \"./applicants\";\nimport { applicationsRoutes } from \"./applications\";\n\n/**\n * Mock API server that runs locally; useuful for demo purposes.\n *\n * @module\n */\n\nexport class MockAPI {\n    routePrefix = \"/api/v1\";\n    // a list of selectors for each route\n    getRoutes = Object.assign(\n        {},\n        sessionsRoutes.get,\n        templatesRoutes.get,\n        positionsRoutes.get,\n        instructorsRoutes.get,\n        assignmentsRoutes.get,\n        applicantsRoutes.get,\n        applicationsRoutes.get,\n        {\n            \"/all_data\": documentCallback({\n                func: data => data,\n                exclude: true\n            })\n        }\n    );\n    postRoutes = Object.assign(\n        {},\n        sessionsRoutes.post,\n        templatesRoutes.post,\n        positionsRoutes.post,\n        instructorsRoutes.post,\n        assignmentsRoutes.post,\n        applicantsRoutes.post,\n        applicationsRoutes.post\n    );\n\n    constructor(seedData) {\n        this.active = false;\n        this.data = seedData;\n        this._getRoutesParsers = Object.keys(this.getRoutes).map(\n            routeStr => new Route(routeStr)\n        );\n        this._postRoutesParsers = Object.keys(this.postRoutes).map(\n            routeStr => new Route(routeStr)\n        );\n    }\n\n    /**\n     * Make a mock `apiGET` call. Always returns an object of\n     * the form\n     * `{status: ..., message: ..., payload: ...}`\n     * This method is bound, so it is safe to pass this function around.\n     *\n     * @memberof MockAPI\n     * @param {string} url An API route without `/api/v1` (e.g., `/sessions`)\n     */\n    apiGET = url => {\n        for (const route of this._getRoutesParsers) {\n            const match = route.match(url);\n            // if we have a match, run the selector with the parsed data\n            if (match) {\n                try {\n                    const payload = this.getRoutes[route.spec](\n                        this.data,\n                        match\n                    );\n                    if (payload == null) {\n                        throw new Error(\n                            `Could not find data for route ${\n                                route.spec\n                            } with params ${JSON.stringify(match)}`\n                        );\n                    }\n                    return {\n                        status: \"success\",\n                        message: \"\",\n                        payload\n                    };\n                } catch (e) {\n                    return { status: \"error\", message: e.toString() };\n                }\n            }\n        }\n        return {\n            status: \"error\",\n            message: `could not find route matching ${url}`\n        };\n    };\n\n    /**\n     * Make a mock `apiPOST` call. Always returns an object of\n     * the form\n     * `{status: ..., message: ..., payload: ...}`\n     * This method is bound, so it is safe to pass this function around.\n     *\n     * @memberof MockAPI\n     * @param {string} url An API route without `/api/v1` (e.g., `/sessions`)\n     * @param {object} body The body of a post request. This should be an object, *not* a JSON string.\n     */\n    apiPOST = (url, body) => {\n        for (const route of this._postRoutesParsers) {\n            const match = route.match(url);\n            // if we have a match, run the selector with the parsed data\n            if (match) {\n                try {\n                    const payload = this.postRoutes[route.spec](\n                        this.data,\n                        match,\n                        body\n                    );\n                    return {\n                        status: \"success\",\n                        message: \"\",\n                        payload\n                    };\n                } catch (e) {\n                    return { status: \"error\", message: e.toString() };\n                }\n            }\n        }\n        return {\n            status: \"error\",\n            message: `could not find route matching ${url}`\n        };\n    };\n\n    /**\n     * Replaces the global `window.fetch` object with calls to `apiGET` and\n     * `apiPOST`. This means that true network requests will no longer\n     * work.\n     *\n     * @param {number} [delay=1000]\n     * @memberof MockAPI\n     */\n    replaceGlobalFetch(delay = 1000) {\n        if (this.active) {\n            return;\n        }\n        this.active = true;\n        this._origFetch = fetch;\n        window.fetch = async (url, init = {}) => {\n            // Parse the URL first. We only want the pathname\n            const parsedURL = new URL(url, \"http://dummy.com\");\n            url = parsedURL.pathname;\n            // Make sure the url doesn't start with \"/api/v1\"\n            url = url.startsWith(this.routePrefix)\n                ? url.replace(this.routePrefix, \"\")\n                : url;\n            let mockResponse;\n            if (init.method === \"GET\") {\n                mockResponse = this.apiGET(url);\n            } else {\n                let body = init.body;\n                if (typeof body === \"string\") {\n                    body = JSON.parse(body);\n                }\n                mockResponse = this.apiPOST(url, body);\n            }\n            // eslint-disable-next-line\n            console.log(\n                `MockAPI ${init.method} Request.`,\n                url,\n                init,\n                \"Reponding with\",\n                mockResponse\n            );\n            // Create a `Response` object to return so that we fully immitate\n            // the `fetch` api.\n            const responseObj = new Response(\n                new Blob([JSON.stringify(mockResponse)], {\n                    type: \"application/json\"\n                }),\n                { status: 200, statusText: \"OK\" }\n            );\n            return new Promise(resolve => {\n                window.setTimeout(() => resolve(responseObj), delay);\n            });\n        };\n    }\n\n    /**\n     * Restore the global `window.fetch` to what the browser provides.\n     * If `window.fetch` has not been overridden, this function does nothing.\n     *\n     * @memberof MockAPI\n     */\n    restoreGlobalFetch() {\n        this.active = false;\n        window.fetch = this._origFetch || fetch;\n    }\n}\n\nconst mockAPI = new MockAPI(mockData);\nexport { mockAPI, mockData };\n","import PropTypes from \"prop-types\";\n\n/**\n * Generate proptypes for API responses using the passed-in proptypes function.\n * This is encapsulated so that `PropTypes` can be replaced (for example, with a proxy\n * used for documentation generation).\n *\n * @param {*} PropTypes - a PropTypes function (coming from the `\"prop-types\"` module or elsewhere)\n * @returns an object of PropTypes\n */\nfunction generatePropTypes(PropTypes) {\n    return {\n        apiResponse: PropTypes.shape({\n            status: PropTypes.oneOf([\"success\", \"error\"]).isRequired,\n            message: PropTypes.string,\n            payload: PropTypes.any\n        }),\n        apiResponseSuccess: PropTypes.shape({\n            status: PropTypes.oneOf([\"success\"]).isRequired,\n            message: PropTypes.string,\n            payload: PropTypes.any\n        }),\n        apiResponseError: PropTypes.shape({\n            status: PropTypes.oneOf([\"error\"]).isRequired,\n            message: PropTypes.string.isRequired,\n            payload: PropTypes.any\n        }),\n        idOnly: PropTypes.shape({\n            id: PropTypes.oneOfType([PropTypes.number, PropTypes.string])\n        }),\n        session: PropTypes.shape({\n            id: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n            start_date: PropTypes.string,\n            end_date: PropTypes.string,\n            name: PropTypes.string.isRequired\n        }),\n        offerTemplateMinimal: PropTypes.shape({\n            offer_template: PropTypes.string\n        }),\n        offerTemplate: PropTypes.shape({\n            offer_template: PropTypes.string,\n            position_type: PropTypes.string\n        }),\n        position: PropTypes.shape({\n            position_code: PropTypes.string.isRequired,\n            position_title: PropTypes.string,\n            est_hours_per_assignment: PropTypes.number,\n            est_start_date: PropTypes.string,\n            est_end_date: PropTypes.string,\n            position_type: PropTypes.string,\n            duties: PropTypes.string,\n            qualifications: PropTypes.string,\n            ad_hours_per_assignment: PropTypes.number,\n            ad_num_assignments: PropTypes.number,\n            ad_open_date: PropTypes.string,\n            ad_close_date: PropTypes.string,\n            desired_num_assignments: PropTypes.number,\n            current_enrollment: PropTypes.number,\n            current_waitlisted: PropTypes.number,\n            instructors: PropTypes.arrayOf(\n                PropTypes.shape({\n                    id: PropTypes.oneOfType([\n                        PropTypes.number,\n                        PropTypes.string\n                    ]).isRequired\n                })\n            )\n        }),\n        instructor: PropTypes.shape({\n            first_name: PropTypes.string.isRequired,\n            last_name: PropTypes.string.isRequired,\n            email: PropTypes.string,\n            utorid: PropTypes.string.isRequired\n        }),\n        assignment: PropTypes.shape({\n            contract_start: PropTypes.string,\n            contract_end: PropTypes.string,\n            note: PropTypes.string,\n            offer_override_pdf: PropTypes.string,\n            applicant_id: PropTypes.oneOfType([\n                PropTypes.number,\n                PropTypes.string\n            ]).isRequired,\n            position_id: PropTypes.oneOfType([\n                PropTypes.number,\n                PropTypes.string\n            ]).isRequired\n        }),\n        applicant: PropTypes.shape({\n            utorid: PropTypes.string.isRequired,\n            student_number: PropTypes.string,\n            first_name: PropTypes.string.isRequired,\n            last_name: PropTypes.string.isRequired,\n            email: PropTypes.string,\n            phone: PropTypes.string\n        }),\n        wageChunk: PropTypes.shape({\n            start_date: PropTypes.string,\n            end_date: PropTypes.string,\n            hours: PropTypes.number,\n            rate: PropTypes.number\n        }),\n        reportingTags: PropTypes.shape({\n            name: PropTypes.string\n        }),\n        offer: PropTypes.shape({\n            offer_template: PropTypes.string,\n            first_name: PropTypes.string,\n            last_name: PropTypes.string,\n            email: PropTypes.string,\n            position_code: PropTypes.string,\n            position_title: PropTypes.string,\n            position_start_date: PropTypes.string,\n            position_end_date: PropTypes.string,\n            first_time_ta: PropTypes.bool,\n            instructor_contact_desc: PropTypes.string,\n            pay_period_desc: PropTypes.string,\n            installments: PropTypes.number,\n            ta_coordinator_name: PropTypes.string,\n            ta_coordinator_email: PropTypes.string,\n            emailed_date: PropTypes.string,\n            string: PropTypes.string,\n            accepted_date: PropTypes.string,\n            rejected_date: PropTypes.string,\n            withdrawn_date: PropTypes.string\n        }),\n        application: PropTypes.shape({\n            session_id: PropTypes.number,\n            comments: PropTypes.string,\n            program: PropTypes.string,\n            department: PropTypes.string,\n            previous_uoft_experience: PropTypes.string,\n            yip: PropTypes.number,\n            annotation: PropTypes.string,\n            applicant_id: PropTypes.number\n        })\n    };\n}\n\nconst apiPropTypes = generatePropTypes(PropTypes);\n\nexport { apiPropTypes, generatePropTypes };\n","/**\n * Tools for generating documentation\n */\n\nimport PropTypes from \"prop-types\";\nimport RouteParser from \"route-parser\";\nimport { generatePropTypes } from \"./prop-types\";\n\nclass CallAtom {\n    constructor(prop, args) {\n        this.name = prop;\n        this.args = args;\n    }\n    toString() {\n        if (this.args == null) {\n            return \"\" + this.name;\n        }\n        return \"\" + this.name + \"(\" + this.args.join(\", \") + \")\";\n    }\n}\nfunction createCallChain(chain = [], prop, args) {\n    return chain.concat([new CallAtom(prop, args)]);\n}\n/**\n * A proxy to wrap `PropTypes` so that the call chain can be recorded.\n * For example, `PropTypes.bool.isRequired` would have the added method `.callChain`\n * which would return an array of `CallAtom` objects consisting of `bool` and `isRequired`.\n * This can be used to generate documentation from existing proptype definitions.\n *\n * @param {*} obj\n * @param {*} [callChain=[]]\n * @returns\n */\nfunction propTypesProxy(obj, callChain = []) {\n    const handler = {\n        get(obj, prop, receiver) {\n            if (prop === \"callChain\") {\n                return callChain;\n            } else if (prop === \"toJSON\") {\n                return () => callChain;\n            }\n            const ret = Reflect.get(obj, prop, receiver);\n            if (ret instanceof Object) {\n                return propTypesProxy(ret, createCallChain(callChain, prop));\n            }\n            return ret;\n        },\n        apply(obj, thisArg, args) {\n            const lastProp = callChain.pop() || { name: \"<root>\" };\n            const ret = Reflect.apply(obj, thisArg, args);\n            if (ret instanceof Object) {\n                return propTypesProxy(\n                    ret,\n                    createCallChain(callChain, lastProp.name, args)\n                );\n            }\n            return ret;\n        },\n        ownKeys(obj) {\n            return [...Reflect.ownKeys(obj), \"callChain\", \"toJSON\"];\n        }\n    };\n\n    return new Proxy(obj, handler);\n}\nconst wrappedPropTypes = propTypesProxy(PropTypes);\n/**\n * PropType defintions for the API that have been wrapped in\n * a proxy so they can be convereted into documentation.\n */\nconst docApiPropTypes = generatePropTypes(wrappedPropTypes);\n\nconst PROPTYPES_TO_SWAGGER_TYPES = {\n    string: \"string\",\n    number: \"number\",\n    bool: \"boolean\",\n    object: \"object\",\n    array: \"array\",\n    any: {}\n};\n\nfunction wrappedPropTypesToSwagger(pt) {\n    const ret = {};\n    if (!pt.callChain) {\n        // eslint-disable-next-line\n        console.warn(\n            \"Attempting to compute swagger values for non-wrapped object\",\n            pt\n        );\n    } else {\n        // We are a proxied PropTypes object\n        //\n        // PropTypes calls can be at most two long with the second argument\n        // being `.isRequired`\n        const [type, isRequired] = pt.callChain;\n        const requiredList = [];\n        if (isRequired) {\n            ret[\"required\"] = true;\n        }\n        if (type.args) {\n            // in this case, we were a PropTypes function called with some arguments\n            switch (type.name) {\n                case \"shape\":\n                    // in this case we're passing in an object with properties to be validated\n                    ret[\"type\"] = \"object\";\n                    ret[\"properties\"] = {};\n                    for (const [key, val] of Object.entries(type.args[0])) {\n                        const swaggerVal = wrappedPropTypesToSwagger(val);\n                        if (swaggerVal[\"required\"]) {\n                            // Required properties in swagger must be listed up-front (i.e., as a list\n                            // of property names, not as an attribute of an individual property),\n                            // so hoist them.\n                            requiredList.push(key);\n                            delete swaggerVal[\"required\"];\n                        }\n                        ret[\"properties\"][key] = swaggerVal;\n                    }\n                    if (requiredList.length > 0) {\n                        ret[\"required\"] = requiredList;\n                    }\n                    break;\n                case \"arrayOf\":\n                    ret[\"type\"] = \"array\";\n                    ret[\"items\"] = wrappedPropTypesToSwagger(type.args[0]);\n                    break;\n                case \"oneOf\":\n                    // XXX assuming `oneOf` is only used for strings\n                    ret[\"type\"] = \"string\";\n                    ret[\"enum\"] = type.args[0];\n                    break;\n                case \"oneOfType\":\n                    ret[\"oneOf\"] = type.args[0].map(wrappedPropTypesToSwagger);\n                    break;\n                default:\n                    break;\n            }\n        } else {\n            if (PROPTYPES_TO_SWAGGER_TYPES[type.name]) {\n                // in this case, we're a basic swagger type\n                ret[\"type\"] = PROPTYPES_TO_SWAGGER_TYPES[type.name];\n            }\n        }\n    }\n\n    return ret;\n}\n\n/**\n * Wrap `payload` in a standard API response formatted\n * for openapi\n *\n * @param {object} payload\n * @returns {object}\n */\nfunction wrapInStandardApiResponseForSwagger(payload = { type: \"object\" }) {\n    return {\n        type: \"object\",\n        properties: {\n            status: {\n                type: \"string\",\n                enum: [\"success\", \"error\"]\n            },\n            message: { type: \"string\" },\n            payload\n        },\n        required: [\"status\"]\n    };\n}\n\n/**\n * Take a path template in `\"route-parser\"`\n * form, e.g. `/sessions/:session_id`, and encode it for\n * consumption by swagger, e.g., `/sessions/{session_id}`.\n *\n * @param {string} url\n * @returns {string}\n */\nfunction urlTemplateToSwagger(url) {\n    // get the template variables\n    // using a trick: have the RoutePasers\n    // parse it's own template, giving us\n    // a list of variables in the process\n    const parsed = RouteParser(url);\n    const templateVars = Object.keys(parsed.match(parsed.spec));\n    const subs = {};\n    for (const templateVar of templateVars) {\n        subs[templateVar] = \"{\" + templateVar + \"}\";\n    }\n    return { url: decodeURI(parsed.reverse(subs)), templateVars };\n}\n\n/**\n * Convert the `docs` attribute from a callback that\n * has been documented with `documentCallback` into an openapi\n * object.\n *\n * @param {object} docs\n * @param {string[]} [templateVars=[]] - list of template variables in the route\n * @returns {object} - openapi object\n */\nfunction documentedCallbackToSwagger(docs, templateVars = []) {\n    const ret = { responses: { default: {} } };\n    if (!docs) {\n        return ret;\n    }\n    ret.summary = docs.summary;\n    // If there are templateVars, they should become `paramters`\n    if (templateVars.length > 0) {\n        ret.parameters = templateVars.map(x => ({\n            name: x,\n            in: \"path\",\n            description: x,\n            required: true\n        }));\n    }\n    // `docs.returns` holds information about what the route will return\n    if (docs.returns) {\n        ret.responses.default = {\n            content: {\n                \"application/json\": {\n                    schema: wrapInStandardApiResponseForSwagger(\n                        wrappedPropTypesToSwagger(docs.returns)\n                    )\n                }\n            }\n        };\n    }\n    // `docs.posts` holds information about what you can put in the\n    // requestBody\n    if (docs.posts) {\n        ret.requestBody = {\n            content: {\n                \"application/json\": {\n                    schema: wrappedPropTypesToSwagger(docs.posts)\n                }\n            }\n        };\n    }\n\n    return ret;\n}\n\n/**\n * Turn mockAPI routes into swagger-ui JSON object\n *\n * @param {{getRoutes: object, postRoutes: object}} [mockAPI={}]\n * @returns {object} - openapi configuration\n */\nfunction mockApiRoutesAsSwaggerPaths(mockAPI = {}) {\n    const { getRoutes = {}, postRoutes = {} } = mockAPI;\n    const ret = {};\n    for (const [path, val] of Object.entries(getRoutes)) {\n        const { url: templatePath, templateVars } = urlTemplateToSwagger(path);\n        if (val.docs && val.docs.exclude) {\n            continue;\n        }\n        ret[templatePath] = Object.assign(ret[templatePath] || {}, {\n            get: documentedCallbackToSwagger(val.docs, templateVars)\n        });\n    }\n    for (const [path, val] of Object.entries(postRoutes)) {\n        const { url: templatePath, templateVars } = urlTemplateToSwagger(path);\n        if (val.docs && val.docs.exclude) {\n            continue;\n        }\n        ret[templatePath] = Object.assign(ret[templatePath] || {}, {\n            post: documentedCallbackToSwagger(val.docs, templateVars)\n        });\n    }\n\n    // The initial segment of each route is a \"tag\"; get a unique\n    // list of each of these tags and then for annotating the routes\n    const tags = Array.from(\n        new Set(\n            Object.keys(ret)\n                .map(x => x.split(\"/\")[1])\n                .filter(x => x)\n        )\n    );\n    // If a route contains one of the \"tags\", then it should be annotated\n    // accordingly (with each relavent tag)\n    for (const [path, info] of Object.entries(ret)) {\n        const applicableTags = tags.filter(x => path.includes(x));\n        if (info.get && applicableTags.length > 0) {\n            info.get.tags = applicableTags;\n        }\n        if (info.post && applicableTags.length > 0) {\n            info.post.tags = applicableTags;\n        }\n    }\n\n    // Alphabetize the routes so they display in a sensible order.\n    const sortedRet = {};\n    for (const path of Object.keys(ret).sort()) {\n        sortedRet[path] = ret[path];\n    }\n\n    return sortedRet;\n}\n\n/**\n * Document a function with attributes for autogenerating openapi\n * specifications from.\n *\n * @param {*} { func, exclude = false, ...attrs }\n * @returns\n */\nfunction documentCallback({ func, exclude = false, ...attrs }) {\n    // create a wrapped function that we can stuff attributes onto\n    const ret = (...args) => func(...args);\n    ret.docs = {\n        exclude,\n        ...attrs\n    };\n    return ret;\n}\n\nexport {\n    wrappedPropTypes,\n    wrappedPropTypesToSwagger,\n    urlTemplateToSwagger,\n    mockApiRoutesAsSwaggerPaths,\n    documentCallback,\n    docApiPropTypes\n};\n","export function setGlobals(globals = {}, location = window.location) {\n    const searchParams = new URLSearchParams();\n    for (let [key, val] of Object.entries(globals)) {\n        searchParams.append(key, JSON.stringify(val));\n    }\n    if (window.history.pushState && (\"\" + searchParams).length > 0) {\n        const newurl =\n            location.protocol +\n            \"//\" +\n            location.host +\n            location.pathname +\n            \"?\" +\n            searchParams +\n            location.hash;\n        if (newurl !== \"\" + location) {\n            window.history.pushState({ path: newurl }, \"\", newurl);\n        }\n    }\n    return { type: \"SET_GLOBALS\", payload: globals };\n}\n","import React from \"react\";\nimport { Button, ButtonGroup } from \"react-bootstrap\";\nimport { connect } from \"react-redux\";\nimport { setGlobals } from \"../views/globals/actions\";\n\nlet mockAPI = { replaceGlobalFetch: () => {}, restoreGlobalFetch: () => {} };\n//import { mockAPI } from \"../api/mockAPI\";\n\nfunction setActive(state, props = {}) {\n    const { fetchSessions = () => {}, active, _setActive = () => {} } = props;\n    if (state === active) {\n        // avoid getting into an update loop\n        return;\n    }\n\n    // store the current activation state in a global (url-persistent) variable\n    props.setGlobals({ ...props.globals, mockAPI: state });\n    if (state === true) {\n        mockAPI.replaceGlobalFetch();\n    } else {\n        mockAPI.restoreGlobalFetch();\n    }\n    _setActive(mockAPI.active);\n    // after the mock API has been set, refetch the sessions,\n    // which will trigger a refetch of all the other data.\n    fetchSessions();\n}\n\n/**\n * A toggle switch for turning on and off the Mock API. An instance\n * of the Mock API is included in this component, and this component\n * takes no arguments.\n *\n * This component only renders when `process.env.REACT_APP_DEV_FEATURES` is truthy.\n *\n * @export\n * @returns {React.ElementType}\n */\nlet ToggleMockApi = function ToggleMockApi(props) {\n    const [active, _setActive] = React.useState(mockAPI.active);\n    const fullProps = { ...props, active, _setActive };\n    // Check the global state to see if we should activate right away\n    React.useEffect(() => {\n        if (props.globals.mockAPI === true) {\n            setActive(true, fullProps);\n        }\n        // eslint-disable-next-line\n    }, [props.globals]);\n\n    return (\n        <span\n            title={\n                \"The Mock API simulates the TAPP API but uses browser-based storage. This allows you to test TAPP functionality without a working server.\"\n            }\n        >\n            Mock API{\" \"}\n            <ButtonGroup>\n                <Button\n                    variant={active ? \"primary\" : \"secondary\"}\n                    onClick={() => setActive(true, fullProps)}\n                >\n                    On\n                </Button>\n                <Button\n                    variant={active ? \"secondary\" : \"primary\"}\n                    onClick={() => setActive(false, fullProps)}\n                >\n                    Off\n                </Button>\n            </ButtonGroup>\n        </span>\n    );\n};\n\n// in production, ToggleMockApi is a no-op. In development, it actually\n// does something.\n/* eslint-disable */\nif (process.env.REACT_APP_DEV_FEATURES) {\n    const mock = require(\"../api/mockAPI\");\n    mockAPI = mock.mockAPI;\n} else {\n    ToggleMockApi = function ToggleMockApi() {\n        return null;\n    };\n}\n/* eslint-enable */\n\nToggleMockApi = connect(\n    state => ({ globals: state.ui.globals }),\n    { setGlobals }\n)(ToggleMockApi);\n\nexport { ToggleMockApi };\n","import { error } from \"react-notification-system-redux\";\n\n// these properties are for `react-notification-system-redux`\nconst defaultNotifProps = {\n    position: \"tr\",\n    autoDismiss: 10,\n    title: \"Error\"\n};\n\nexport const fetchError = payload =>\n    error({\n        ...defaultNotifProps,\n        title: \"Error fetching data\",\n        message: payload\n    });\n\nexport const upsertError = payload =>\n    error({\n        ...defaultNotifProps,\n        title: \"Error updating/inserting data\",\n        message: payload\n    });\n\nexport const deleteError = payload =>\n    error({\n        ...defaultNotifProps,\n        title: \"Error deleting data\",\n        message: payload\n    });\n\n// General error for when a more specific error\n// type is not known\nexport const apiError = payload =>\n    error({\n        ...defaultNotifProps,\n        title: \"API Error\",\n        message: payload\n    });\n","import { API_INTERACTION_START, API_INTERACTION_END } from \"../constants\";\n\n// actions\nexport const apiInteractionStart = (id, message) => ({\n    type: API_INTERACTION_START,\n    payload: { id, message }\n});\nexport const apiInteractionEnd = id => ({\n    type: API_INTERACTION_END,\n    payload: { id }\n});\n","export const API_INTERACTION_START = \"API_INTERACTION_START\";\nexport const API_INTERACTION_END = \"API_INTERACTION_END\";\n\n/* Constants were batch-created with the following code:\n\n    let wrap = x => x.map(y => `export const ${y} = \"${y}\";`);\n    console.log(\n        [\n            \"session\",\n            \"instructor\",\n            \"position\",\n            \"assignment\",\n            \"offer\",\n            \"position_template\",\n            \"application\",\n            \"wage_chunk\"\n        ]\n            .map(x => {\n                x = x.toUpperCase();\n                return [`// \\`${x.toLowerCase()}\\`-related constants`]\n                    .concat(\n                        wrap([\n                            `FETCH_${x}S_SUCCESS`,\n                            `FETCH_ONE_${x}_SUCCESS`,\n                            `UPSERT_ONE_${x}_SUCCESS`,\n                            `DELETE_ONE_${x}_SUCCESS`\n                        ])\n                    )\n                    .join(\"\\n\");\n            })\n            .join(\"\\n\\n\")\n    );\n*/\n\n// `session`-related constants\nexport const FETCH_SESSIONS_SUCCESS = \"FETCH_SESSIONS_SUCCESS\";\nexport const FETCH_ONE_SESSION_SUCCESS = \"FETCH_ONE_SESSION_SUCCESS\";\nexport const UPSERT_ONE_SESSION_SUCCESS = \"UPSERT_ONE_SESSION_SUCCESS\";\nexport const DELETE_ONE_SESSION_SUCCESS = \"DELETE_ONE_SESSION_SUCCESS\";\nexport const SET_ACTIVE_SESSION = \"SET_ACTIVE_SESSION\";\n\n// `instructor`-related constants\nexport const FETCH_INSTRUCTORS_SUCCESS = \"FETCH_INSTRUCTORS_SUCCESS\";\nexport const FETCH_ONE_INSTRUCTOR_SUCCESS = \"FETCH_ONE_INSTRUCTOR_SUCCESS\";\nexport const UPSERT_ONE_INSTRUCTOR_SUCCESS = \"UPSERT_ONE_INSTRUCTOR_SUCCESS\";\nexport const DELETE_ONE_INSTRUCTOR_SUCCESS = \"DELETE_ONE_INSTRUCTOR_SUCCESS\";\nexport const ADD_INSTRUCTOR_TO_POSITION_SUCCESS =\n    \"ADD_INSTRUCTOR_TO_POSITION_SUCCESS\";\n\n// `position`-related constants\nexport const FETCH_POSITIONS_SUCCESS = \"FETCH_POSITIONS_SUCCESS\";\nexport const FETCH_ONE_POSITION_SUCCESS = \"FETCH_ONE_POSITION_SUCCESS\";\nexport const UPSERT_POSITIONS_SUCCESS = \"UPSERT_POSITIONS_SUCCESS\";\nexport const UPSERT_ONE_POSITION_SUCCESS = \"UPSERT_ONE_POSITION_SUCCESS\";\nexport const DELETE_ONE_POSITION_SUCCESS = \"DELETE_ONE_POSITION_SUCCESS\";\n\n// `assignment`-related constants\nexport const FETCH_ASSIGNMENTS_SUCCESS = \"FETCH_ASSIGNMENTS_SUCCESS\";\nexport const FETCH_ONE_ASSIGNMENT_SUCCESS = \"FETCH_ONE_ASSIGNMENT_SUCCESS\";\nexport const UPSERT_ONE_ASSIGNMENT_SUCCESS = \"UPSERT_ONE_ASSIGNMENT_SUCCESS\";\nexport const DELETE_ONE_ASSIGNMENT_SUCCESS = \"DELETE_ONE_ASSIGNMENT_SUCCESS\";\n\n// `offer`-related constants\nexport const FETCH_OFFERS_SUCCESS = \"FETCH_OFFERS_SUCCESS\";\nexport const FETCH_ONE_OFFER_SUCCESS = \"FETCH_ONE_OFFER_SUCCESS\";\nexport const UPSERT_ONE_OFFER_SUCCESS = \"UPSERT_ONE_OFFER_SUCCESS\";\nexport const DELETE_ONE_OFFER_SUCCESS = \"DELETE_ONE_OFFER_SUCCESS\";\n\n// `position_template`-related constants\nexport const FETCH_POSITION_TEMPLATES_SUCCESS =\n    \"FETCH_POSITION_TEMPLATES_SUCCESS\";\nexport const FETCH_ONE_POSITION_TEMPLATE_SUCCESS =\n    \"FETCH_ONE_POSITION_TEMPLATE_SUCCESS\";\nexport const UPSERT_ONE_POSITION_TEMPLATE_SUCCESS =\n    \"UPSERT_ONE_POSITION_TEMPLATE_SUCCESS\";\nexport const DELETE_ONE_POSITION_TEMPLATE_SUCCESS =\n    \"DELETE_ONE_POSITION_TEMPLATE_SUCCESS\";\nexport const FETCH_ALL_POSITION_TEMPLATES_SUCCESS =\n    \"FETCH_ALL_POSITION_TEMPLATES_SUCCESS\";\n\n// `application`-related constants\nexport const FETCH_APPLICATIONS_SUCCESS = \"FETCH_APPLICATIONS_SUCCESS\";\nexport const FETCH_ONE_APPLICATION_SUCCESS = \"FETCH_ONE_APPLICATION_SUCCESS\";\nexport const UPSERT_ONE_APPLICATION_SUCCESS = \"UPSERT_ONE_APPLICATION_SUCCESS\";\nexport const DELETE_ONE_APPLICATION_SUCCESS = \"DELETE_ONE_APPLICATION_SUCCESS\";\n\n// `wage_chunk`-related constants\nexport const FETCH_WAGE_CHUNKS_SUCCESS = \"FETCH_WAGE_CHUNKS_SUCCESS\";\nexport const FETCH_ONE_WAGE_CHUNK_SUCCESS = \"FETCH_ONE_WAGE_CHUNK_SUCCESS\";\nexport const UPSERT_ONE_WAGE_CHUNK_SUCCESS = \"UPSERT_ONE_WAGE_CHUNK_SUCCESS\";\nexport const DELETE_ONE_WAGE_CHUNK_SUCCESS = \"DELETE_ONE_WAGE_CHUNK_SUCCESS\";\n\n// `applicant`-related constants\nexport const FETCH_APPLICANTS_SUCCESS = \"FETCH_APPLICANTS_SUCCESS\";\nexport const FETCH_ONE_APPLICANT_SUCCESS = \"FETCH_ONE_APPLICANT_SUCCESS\";\nexport const UPSERT_ONE_APPLICANT_SUCCESS = \"UPSERT_ONE_APPLICANT_SUCCESS\";\nexport const DELETE_ONE_APPLICANT_SUCCESS = \"DELETE_ONE_APPLICANT_SUCCESS\";\nexport const ADD_APPLICANT_TO_SESSION_SUCCESS =\n    \"ADD_APPLICANT_TO_SESSION_SUCCESS\";\n","import uuid from \"uuid-random\";\nimport PropTypes from \"prop-types\";\nimport { apiError } from \"./errors\";\nimport { apiInteractionStart, apiInteractionEnd } from \"./status\";\n\n/**\n * Turn an array of items into a hash of items indexed\n * by the value of `indexBy`\n *\n * @export\n * @param {array} l\n * @param {string} [indexBy=\"id\"]\n * @returns\n */\nexport function arrayToHash(l, indexBy = \"id\") {\n    if (!Array.isArray(l)) {\n        return l;\n    }\n    const ret = {};\n    for (const d of l) {\n        ret[d[indexBy]] = d;\n    }\n    return ret;\n}\n\n/**\n * Creates an action function that returns an object of the form\n * ```\n *    {\n *        type: TYPE,\n *        payload: payload\n *    }\n * ```\n * This factory function can be used if your action is of this standard form.\n *\n * @export\n * @param {string} type\n * @returns {function(object): {type: string, payload: object}}\n */\nexport function actionFactory(type) {\n    return payload => ({\n        type,\n        payload\n    });\n}\n\nexport const onActiveSessionChangeActions = [];\n\n/**\n * Registers an action to be called whenever activeSession changes.\n * If the action is a function, it should expect no arguments. It may\n * be a redux-thunk.\n *\n * @export\n * @param {(function|object)} dispatcher\n */\nexport function runOnActiveSessionChange(action) {\n    // if we passed in a regular object, encapsulate it\n    // in a function.\n    if (!(action instanceof Function)) {\n        action = () => action;\n    }\n    onActiveSessionChangeActions.push(action);\n}\n\n/**\n * Create a dispatcher that validates `payload` accoring to the specified\n * `propTypes`. If validation fails, a warning will be printed to the console\n * and exectution of the dispatcher will stop. This function also wraps the\n * dispatch in `apiInteractionStart` and `apiInteractionEnd` actions.\n *\n * If the action only accepts one argument, then `propTypes` should be a single\n * `PropTypes` object (e.g., `{id: PropTypes.any.isRequired}`). If the action\n * accepts multiple arguments, `propTypes` should be an array (of length the number\n * of accepted arguments) of `PropTypes` objects.\n *\n * @export\n * @param {object} obj An object with information to create an action\n * @param {function} obj.dispatcher The action that will be dispatched after validation passes\n * @param {string} obj.name The name of the action\n * @param {string} obj.description A description of what the action does\n * @param {?(PropTypes|PropTypes[])} obj.propTypes A PropTypes object or an array of PropTypes objects\n * @param {?(function|boolean)} obj.onErrorDispatch Function that returns an action to be executed on error, or boolean `true` to autogenerate an error action\n * @returns {function} A redux-thunk action\n */\nexport function validatedApiDispatcher({\n    dispatcher,\n    // eslint-disable-next-line react/forbid-foreign-prop-types\n    propTypes,\n    name,\n    description,\n    onErrorDispatch\n}) {\n    return (...args) => {\n        // we return a new dispatcher that performs some validation\n        // and then dispatches as usual\n        return async dispatch => {\n            // validate `args`. `args` is an array containing the arguments.\n            // if propTypes is an array, it lists the propTypes for every argument,\n            // otherwise there is just one argument.\n\n            let wasPropTypesError = false;\n            // This function performs the actual PropType check with extra arguments that\n            // will make the warnings in the console more descriptive\n            function propTypeCheck(propTypes, arg) {\n                PropTypes.checkPropTypes(\n                    propTypes,\n                    arg || {},\n                    \"api action argument\",\n                    name,\n                    () => {\n                        wasPropTypesError = true;\n                    }\n                );\n            }\n            if (Array.isArray(propTypes)) {\n                if (propTypes.length !== args.length) {\n                    wasPropTypesError = true;\n                } else {\n                    for (let i = 0; i < propTypes.length; i++) {\n                        propTypeCheck(propTypes[i], args[i]);\n                    }\n                }\n            } else if (propTypes) {\n                propTypeCheck(propTypes, args[0]);\n            }\n            if (wasPropTypesError) {\n                dispatch(\n                    apiError(\n                        `Invalid arguments to ${name} while attempting action \"${description}\"`\n                    )\n                );\n                return;\n            }\n\n            // Declare the start of an API interaction. Generate a `statusId`\n            // so that we can specify which API interaction is ending (since multiple\n            // ones may be going at the same time).\n            const statusId = uuid();\n            dispatch(apiInteractionStart(statusId, description));\n            try {\n                // We need to await so that promise errors get thrown\n                // as real errors\n                await dispatch(dispatcher(...args));\n            } catch (e) {\n                if (onErrorDispatch) {\n                    if (onErrorDispatch instanceof Function) {\n                        dispatch(onErrorDispatch(e));\n                    } else {\n                        dispatch(\n                            apiError(\n                                `Error encountered during \"${description}\"`\n                            )\n                        );\n                    }\n                } else {\n                    throw e;\n                }\n            } finally {\n                // Always declare the API interaction done, even\n                // if there was an error somewhere along the way.\n                dispatch(apiInteractionEnd(statusId));\n            }\n        };\n    };\n}\n","/*\n * A collection of untilty functions for interfacing with the API\n */\n\nconst API_URL = \"/api/v1\";\nconst FETCH_INIT = {\n    credentials: \"same-origin\",\n    headers: {\n        \"Content-Type\": \"application/json\"\n    }\n};\n\n/**\n * Error thrown whenever an api call returns with `status===\"error\"`\n *\n * @class ApiError\n * @extends {Error}\n */\nclass ApiError extends Error {\n    constructor(resp) {\n        const errorMessage = resp.message;\n        super(errorMessage);\n        if (Error.captureStackTrace) {\n            Error.captureStackTrace(this, ApiFetchError);\n        }\n        this.response = resp;\n        this.status = resp.status;\n    }\n}\n\n/**\n * Error thrown whenever an api fetch request\n * returns with a status other than 200\n *\n * @class ApiFetchError\n * @extends {ApiError}\n */\nclass ApiFetchError extends ApiError {\n    constructor(resp, path) {\n        const errorMessage = `Got status ${resp.status} ${\n            resp.statusText\n        } when fetching ${API_URL + path}`;\n        super({ message: errorMessage });\n        if (Error.captureStackTrace) {\n            Error.captureStackTrace(this, ApiFetchError);\n        }\n        this.response = resp;\n        this.status = resp.status;\n    }\n}\n\n// Ensure that `path` starts with a `/`\nfunction _ensurePath(path) {\n    return path.startsWith(\"/\") ? path : \"/\" + path;\n}\n\n// Process a `fetch` response from the API.\n// Successful responses from the API should be of\n// the form `{status: (\"success\"|\"error\"), message: \"...\", payload: ...}.\n// Throw an error on a failed HTTP request or a `status !== \"success\"`\n// response from the API.\nasync function _processFetchResponse(resp, path) {\n    if (resp.status === 200) {\n        const json = await resp.json();\n        if (json.status !== \"success\") {\n            // If we got random JSON instead of {status: ..., message: ..., payload: ...}\n            // There will be no `json.message`. Provide a default message that will get\n            // overridden in this case\n            throw new ApiError({\n                message: \"Server response did not have `status === 'success`\",\n                ...json\n            });\n        }\n        return json.payload;\n    }\n    // if we made it this far, there was a bad status\n    // returned during fetch\n    throw new ApiFetchError(resp, path);\n}\n\n/**\n * Do a GET requestion on the specified api route\n *\n * @param {string} path\n * @returns {Promise<object>} Promise containing the processed JSON response\n * @throws {(ApiError|ApiFetchError|Error)} Throws an error if the fetch fails or returns with `status===\"error\"`\n */\nasync function apiGET(path) {\n    // remove a leading \"/\" if there is one in `path`\n    path = _ensurePath(path);\n    const resp = await fetch(API_URL + path, {\n        ...FETCH_INIT,\n        method: \"GET\"\n    });\n    return await _processFetchResponse(resp, path);\n}\n\n/**\n * Do a POST requestion on the specified api route\n *\n * @param {string} path\n * @param {object} [body={}]\n * @returns {Promise<object>} Promise containing the processed JSON response\n * @throws {(ApiError|ApiFetchError|Error)} Throws an error if the fetch fails or returns with `status===\"error\"`\n */\nasync function apiPOST(path, body = {}) {\n    // remove a leading \"/\" if there is one in `path`\n    path = _ensurePath(path);\n    const resp = await fetch(API_URL + path, {\n        ...FETCH_INIT,\n        method: \"POST\",\n        body: JSON.stringify(body)\n    });\n    return await _processFetchResponse(resp, path);\n}\n\nexport { API_URL, ApiError, ApiFetchError, apiGET, apiPOST };\n","/*\n * A set of utility functions to help with creating reducers\n */\n\nimport { combineReducers as _origCombineReducers } from \"redux\";\nimport { createReducer as _origCreateReducer } from \"redux-create-reducer\";\n\n/**\n * Either updates the item `modelData`\n * with id == newItem.id, or appends it.\n *\n * @param {object} modelData\n * @param {object} newItem\n * @returns {object} An updated version of modelData\n */\nexport function upsertItem(modelData, newItem) {\n    let didUpdate = false;\n    const newModelData = modelData.map(item => {\n        if (item.id === newItem.id) {\n            didUpdate = 1;\n            return newItem;\n        }\n        return item;\n    });\n    if (!didUpdate) {\n        newModelData.push(newItem);\n    }\n    return newModelData;\n}\n\n/**\n * Create a basic reducer for the operations\n *   FETCH_MANY\n *   FETCH_ONE\n *   UPSERT_ONE\n *   DELETE_ONE\n * A basic reducer assumes that `state._modelData` is\n * an array and that each item in that array has an `id`\n * that can be used to determine upserts and deletes, etc..\n *\n * @param {string} FETCH_MANY\n * @param {string} FETCH_ONE\n * @param {string} UPSERT_ONE\n * @param {string} DELETE_ONE\n * @returns {object} An object of reducers suitable for passing to `createReducer`\n */\nexport function createBasicReducerObject(\n    FETCH_MANY,\n    FETCH_ONE,\n    UPSERT_ONE,\n    DELETE_ONE\n) {\n    return {\n        [FETCH_MANY]: (state, action) => ({\n            ...state,\n            _modelData: action.payload\n        }),\n        [FETCH_ONE]: (state, action) => ({\n            ...state,\n            _modelData: upsertItem(state._modelData, action.payload)\n        }),\n        [UPSERT_ONE]: (state, action) => ({\n            ...state,\n            _modelData: upsertItem(state._modelData, action.payload)\n        }),\n        [DELETE_ONE]: (state, action) => {\n            const deletedItem = action.payload;\n            return {\n                ...state,\n                _modelData: state._modelData.filter(\n                    item => item.id !== deletedItem.id\n                )\n            };\n        }\n    };\n}\n\n/**\n * Wraps \"redux-create-reducer\"'s version of `createReducer` to add\n * a `_storePath` attribute to the initial state and the reducer.\n * `_storePath` is used by `localStoreSelector` to return the local\n * state when passed in the global state. (For example, if\n *    `state = { a: b: localState }`, then `localStoreSelector(state) === localState`.)\n *\n * @param {object} initialState\n * @param {object} handlers\n * @returns\n */\nexport function createReducer(initialState, handlers) {\n    const path = [];\n    function pushToPath(dir) {\n        path.unshift(dir);\n    }\n    // Every isolated state should have a unique id, so generate\n    // a random one.\n    const _storePath = { id: Math.random(), path, pushToPath };\n\n    // add _storePath to the initial state and to the\n    // new reducer\n    initialState._storePath = _storePath;\n    const reducer = _origCreateReducer(initialState, handlers);\n    reducer._storePath = _storePath;\n\n    // For convenience, attach a local store selector to the reducer\n    reducer._localStoreSelector = createLocalStoreSelector(_storePath);\n\n    return reducer;\n}\n\n/**\n * Search `state` for a local state in the location of `_storePath.path`.\n * For example, if `_storePath.path = [\"a\", \"b\"]`, this function will\n * return `state.a.b`.\n *\n * @param {object} state Redux state\n * @param {object} _storePath The `_storePath` object to use for searching `state`\n * @returns\n */\nfunction _localStoreSelector(state, _storePath) {\n    if (state._storePath && state._storePath.id === _storePath.id) {\n        return state;\n    }\n    try {\n        let localState = state;\n        for (const dir of _storePath.path) {\n            localState = localState[dir];\n        }\n        return localState;\n    } catch (e) {\n        // eslint-disable-next-line\n        console.error(\n            \"Searching\",\n            state,\n            \"for local state with path\",\n            _storePath.join(\".\"),\n            \"but encountered an error\"\n        );\n    }\n    return state;\n}\n\n/**\n * Create a selector that, when passed in the global redux state, will search\n * and return a local state based on the information in `_storePath`. This selector\n * can be passed either the local state or the global state. If it is passed the local\n * state, it checks that the `state._storePath.id` field matches `_storePath.id`;\n * if so, this selector immediately returns `state`. Otherwise, use `_storePath.path`\n * to search for the local state. For example, if `_storePath.path = [\"a\", \"b\"]`,\n * the returned selector will return `state.a.b`.\n *\n * @export\n * @param {object} _storePath\n * @param {array} _storePath.path The path to search in the redux state\n * @param {array} _storePath.id The unique id of the local state\n * @returns {Function} A selector that returns the local state (based on `_storePath`) when passed the global state\n */\nexport function createLocalStoreSelector(_storePath) {\n    return state => _localStoreSelector(state, _storePath);\n}\n\n/**\n * Wraps \"redux\"'s `combineReducers` function so that `reducer._storePath.pushToPath`\n * is called on all child reducers.\n *\n * Redux's `combineReducers` function creates a new reducer from `model` that dispatches\n * actions to all reducers listed in `model`, but passes them an isolated part of the\n * store instead of passing in the full redux store as `state`. This is great for writing\n * reducers, but it makes things complicated for writing selectors, since, in general,\n * a selector will get passed the whole state, not the isolated part of the state that\n * `combineReducers` supplies. This wrapped version of `combineReducers` adds to a `path`\n * variable that is present in each reducer and which can be passed to a smart selector.\n *\n * @export\n * @param {object} model An object whose values are reducers\n * @returns {Function} A reducer\n */\nexport function combineReducers(model) {\n    const pushToPathCallbacks = [];\n    // recursively call all `pushToPath` functions.\n    // They have been stored in `pushToPathCallbacks`\n    function pushToPath(dir) {\n        for (const func of pushToPathCallbacks) {\n            func(dir);\n        }\n    }\n\n    for (const [dir, reducer] of Object.entries(model)) {\n        if (reducer._storePath) {\n            reducer._storePath.pushToPath(dir);\n            pushToPathCallbacks.push(reducer._storePath.pushToPath);\n        }\n    }\n\n    const newReducer = _origCombineReducers(model);\n    newReducer._storePath = { pushToPath };\n\n    return newReducer;\n}\n","import {\n    FETCH_SESSIONS_SUCCESS,\n    FETCH_ONE_SESSION_SUCCESS,\n    UPSERT_ONE_SESSION_SUCCESS,\n    DELETE_ONE_SESSION_SUCCESS,\n    SET_ACTIVE_SESSION\n} from \"../constants\";\nimport { createBasicReducerObject, createReducer } from \"./utils\";\n\nconst initialState = {\n    _modelData: [],\n    activeSession: { id: null }\n};\n\n// XXX set some default data\n// XXX remove whe the API is working\ninitialState._modelData = [\n    {\n        id: 1,\n        start_date: \"2019-09-08T00:00:00.000Z\",\n        end_date: \"2019-12-31T00:00:00.000Z\",\n        name: \"2019 Fall\",\n        rate1: 45.55,\n        rate2: 47.33\n    },\n    {\n        id: 2,\n        start_date: \"2020-01-01T00:00:00.000Z\",\n        end_date: \"2020-04-30T00:00:00.000Z\",\n        name: \"2020 Spring\",\n        rate1: 45.55,\n        rate2: null\n    }\n];\n\n// basicReducers is an object whose keys are FETCH_SESSIONS_SUCCESS, etc,\n// and values are the corresponding reducer functions\nconst basicReducers = createBasicReducerObject(\n    FETCH_SESSIONS_SUCCESS,\n    FETCH_ONE_SESSION_SUCCESS,\n    UPSERT_ONE_SESSION_SUCCESS,\n    DELETE_ONE_SESSION_SUCCESS\n);\n\nexport const sessionsReducer = createReducer(initialState, {\n    ...basicReducers,\n    [SET_ACTIVE_SESSION]: (state, action) => ({\n        ...state,\n        activeSession: action.payload\n    })\n});\n","import PropTypes from \"prop-types\";\nimport { createSelector } from \"reselect\";\nimport {\n    FETCH_SESSIONS_SUCCESS,\n    FETCH_ONE_SESSION_SUCCESS,\n    UPSERT_ONE_SESSION_SUCCESS,\n    DELETE_ONE_SESSION_SUCCESS,\n    SET_ACTIVE_SESSION\n} from \"../constants\";\nimport { fetchError, upsertError, deleteError } from \"./errors\";\nimport {\n    actionFactory,\n    onActiveSessionChangeActions,\n    validatedApiDispatcher\n} from \"./utils\";\nimport { apiGET, apiPOST } from \"../../libs/apiUtils\";\nimport { sessionsReducer } from \"../reducers/sessions\";\n\n// actions\nconst fetchSessionsSuccess = actionFactory(FETCH_SESSIONS_SUCCESS);\nconst fetchOneSessionSuccess = actionFactory(FETCH_ONE_SESSION_SUCCESS);\nconst upsertOneSessionSuccess = actionFactory(UPSERT_ONE_SESSION_SUCCESS);\nconst deleteOneSessionSuccess = actionFactory(DELETE_ONE_SESSION_SUCCESS);\nconst setActiveSessionAction = actionFactory(SET_ACTIVE_SESSION);\n\n// dispatchers\nexport const fetchSessions = validatedApiDispatcher({\n    name: \"fetchSessions\",\n    description: \"Fetch sessions\",\n    onErrorDispatch: e => fetchError(e.toString()),\n    dispatcher: () => async (dispatch, getState) => {\n        const data = await apiGET(\"/sessions\");\n        await dispatch(fetchSessionsSuccess(data));\n\n        // after sessions are fetched, we compare with the active session.\n        // The active session might need to be \"updated\" if the ID matches but\n        // the data doesn't\n        const activeSession = getState().model.sessions.activeSession;\n        const matchingSession = data.filter(s => s.id === activeSession.id)[0];\n        if (\n            matchingSession &&\n            JSON.stringify(matchingSession) !== JSON.stringify(activeSession)\n        ) {\n            // Force an override of the active session, even though the `id`s match.\n            dispatch(setActiveSession(matchingSession, true));\n        }\n    }\n});\n\nexport const fetchSession = validatedApiDispatcher({\n    name: \"fetchSession\",\n    description: \"Fetch session\",\n    propTypes: { id: PropTypes.any.isRequired },\n    onErrorDispatch: e => fetchError(e.toString()),\n    dispatcher: payload => async dispatch => {\n        const data = await apiGET(`/sessions/${payload.id}`);\n        dispatch(fetchOneSessionSuccess(data));\n    }\n});\n\nexport const upsertSession = validatedApiDispatcher({\n    name: \"upsertSession\",\n    description: \"Add/insert session\",\n    propTypes: {},\n    onErrorDispatch: e => upsertError(e.toString()),\n    dispatcher: payload => async dispatch => {\n        const data = await apiPOST(`/sessions`, payload);\n        dispatch(upsertOneSessionSuccess(data));\n    }\n});\n\nexport const deleteSession = payload =>\n    validatedApiDispatcher({\n        name: \"deleteSession\",\n        description: \"Delete session\",\n        propTypes: { id: PropTypes.any.isRequired },\n        onErrorDispatch: e => deleteError(e.toString()),\n        dispatcher: async dispatch => {\n            const data = await apiPOST(`/sessions/delete`, payload);\n            dispatch(deleteOneSessionSuccess(data));\n        }\n    });\n\n/**\n * Sets the `activeSession`. `activeSession` is used\n * in other API calls, so changing the active session may\n * trigger changes in other data (for example, `instructors` or `positions`)\n *\n * @param {object} payload - The session to set active\n */\nexport const setActiveSession = validatedApiDispatcher({\n    name: \"setActiveSession\",\n    description: \"Set the active session\",\n    propTypes: { id: PropTypes.any.isRequired },\n    onErrorDispatch: true,\n    dispatcher: (payload, forceChange = false) => async (\n        dispatch,\n        getState\n    ) => {\n        // Check to see if the active session is actually different. If it is, we will\n        // trigger side-effects\n        const state = getState();\n        if (\n            !forceChange &&\n            state.model.sessions.activeSession.id === payload.id\n        ) {\n            return;\n        }\n        // If we made it here, the activeSession is changing.\n        await dispatch(setActiveSessionAction(payload));\n        // now that we have updated the active session, call all the dispatchers\n        // who requested to be updated whenever the active session changes.\n        // Save their return values so that we can await them after they're\n        // dispatched. This way the browser can do parallel fetching.\n        const promises = [];\n        for (const action of onActiveSessionChangeActions) {\n            promises.push(dispatch(action()));\n        }\n        await Promise.all(promises);\n    }\n});\n\n// selectors\nexport const localStoreSelector = sessionsReducer._localStoreSelector;\nexport const sessionsSelector = createSelector(\n    localStoreSelector,\n    state => state._modelData\n);\nexport const activeSessionSelector = createSelector(\n    localStoreSelector,\n    state => state.activeSession\n);\n","import {\n    FETCH_POSITIONS_SUCCESS,\n    FETCH_ONE_POSITION_SUCCESS,\n    UPSERT_ONE_POSITION_SUCCESS,\n    DELETE_ONE_POSITION_SUCCESS,\n    ADD_INSTRUCTOR_TO_POSITION_SUCCESS\n} from \"../constants\";\nimport { createBasicReducerObject, createReducer } from \"./utils\";\n\nconst initialState = {\n    _modelData: []\n};\n\n// basicReducers is an object whose keys are FETCH_SESSIONS_SUCCESS, etc,\n// and values are the corresponding reducer functions\nconst basicReducers = createBasicReducerObject(\n    FETCH_POSITIONS_SUCCESS,\n    FETCH_ONE_POSITION_SUCCESS,\n    UPSERT_ONE_POSITION_SUCCESS,\n    DELETE_ONE_POSITION_SUCCESS\n);\n\nexport const positionsReducer = createReducer(initialState, {\n    ...basicReducers,\n    [ADD_INSTRUCTOR_TO_POSITION_SUCCESS]: (state, action) => {\n        const positionId = action.payload.position.id;\n        const instructors = action.payload.instructors;\n\n        // update the instructors list, but only if we're in the\n        // right position\n        function updateInstructors(position) {\n            if (position.id !== positionId) {\n                return position;\n            }\n            return {\n                ...position,\n                instructors: instructors\n            };\n        }\n\n        return {\n            ...state,\n            _modelData: state._modelData.map(updateInstructors)\n        };\n    }\n});\n","import {\n    FETCH_INSTRUCTORS_SUCCESS,\n    FETCH_ONE_INSTRUCTOR_SUCCESS,\n    UPSERT_ONE_INSTRUCTOR_SUCCESS,\n    DELETE_ONE_INSTRUCTOR_SUCCESS\n} from \"../constants\";\nimport { createBasicReducerObject, createReducer } from \"./utils\";\n\nconst initialState = {\n    _modelData: []\n};\n\n// basicReducers is an object whose keys are FETCH_SESSIONS_SUCCESS, etc,\n// and values are the corresponding reducer functions\nconst basicReducers = createBasicReducerObject(\n    FETCH_INSTRUCTORS_SUCCESS,\n    FETCH_ONE_INSTRUCTOR_SUCCESS,\n    UPSERT_ONE_INSTRUCTOR_SUCCESS,\n    DELETE_ONE_INSTRUCTOR_SUCCESS\n);\n\nexport const instructorsReducer = createReducer(initialState, basicReducers);\n","import PropTypes from \"prop-types\";\nimport {\n    FETCH_INSTRUCTORS_SUCCESS,\n    FETCH_ONE_INSTRUCTOR_SUCCESS,\n    UPSERT_ONE_INSTRUCTOR_SUCCESS,\n    DELETE_ONE_INSTRUCTOR_SUCCESS\n} from \"../constants\";\nimport { fetchError, upsertError, deleteError } from \"./errors\";\nimport {\n    actionFactory,\n    runOnActiveSessionChange,\n    validatedApiDispatcher\n} from \"./utils\";\nimport { apiGET, apiPOST } from \"../../libs/apiUtils\";\nimport { instructorsReducer } from \"../reducers/instructors\";\nimport { createSelector } from \"reselect\";\n\n// actions\nconst fetchInstructorsSuccess = actionFactory(FETCH_INSTRUCTORS_SUCCESS);\nconst fetchOneInstructorSuccess = actionFactory(FETCH_ONE_INSTRUCTOR_SUCCESS);\nconst upsertOneInstructorSuccess = actionFactory(UPSERT_ONE_INSTRUCTOR_SUCCESS);\nconst deleteOneInstructorSuccess = actionFactory(DELETE_ONE_INSTRUCTOR_SUCCESS);\n\n// dispatchers\nexport const fetchInstructors = validatedApiDispatcher({\n    name: \"fetchInstructors\",\n    description: \"Fetch instructors\",\n    onErrorDispatch: e => fetchError(e.toString()),\n    dispatcher: () => async dispatch => {\n        const data = await apiGET(`/instructors`);\n        dispatch(fetchInstructorsSuccess(data));\n    }\n});\n\nexport const fetchInstructor = validatedApiDispatcher({\n    name: \"fetchInstructor\",\n    description: \"Fetch instructor\",\n    propTypes: { id: PropTypes.any.isRequired },\n    onErrorDispatch: e => fetchError(e.toString()),\n    dispatcher: payload => async dispatch => {\n        const data = await apiGET(`/instructors/${payload.id}`);\n        dispatch(fetchOneInstructorSuccess(data));\n    }\n});\n\nexport const upsertInstructor = validatedApiDispatcher({\n    name: \"upsertInstructor\",\n    description: \"Add/insert instructor\",\n    propTypes: {},\n    onErrorDispatch: e => upsertError(e.toString()),\n    dispatcher: payload => async dispatch => {\n        const data = await apiPOST(`/instructors`, payload);\n        dispatch(upsertOneInstructorSuccess(data));\n    }\n});\n\nexport const deleteInstructor = validatedApiDispatcher({\n    name: \"deleteInstructor\",\n    description: \"Delete instructor\",\n    propTypes: { id: PropTypes.any.isRequired },\n    onErrorDispatch: e => deleteError(e.toString()),\n    dispatcher: payload => async dispatch => {\n        const data = await apiPOST(`/instructors/delete`, payload);\n        dispatch(deleteOneInstructorSuccess(data));\n    }\n});\n\n// selectors\n\n// Each reducer is given an isolated state; instead of needed to remember to\n// pass the isolated state to each selector, `reducer._localStoreSelector` will intelligently\n// search for and return the isolated state associated with `reducer`. This is not\n// a standard redux function.\nexport const localStoreSelector = instructorsReducer._localStoreSelector;\nexport const instructorsSelector = createSelector(\n    localStoreSelector,\n    state => state._modelData\n);\n\n// Any time the active session changes, we want to refetch\n// all data. Calling `runOnActiveSessionChange` ensures that\n// when the active session changes all data is re-fetched\nrunOnActiveSessionChange(fetchInstructors);\n","import PropTypes from \"prop-types\";\nimport {\n    FETCH_POSITIONS_SUCCESS,\n    FETCH_ONE_POSITION_SUCCESS,\n    UPSERT_POSITIONS_SUCCESS,\n    UPSERT_ONE_POSITION_SUCCESS,\n    DELETE_ONE_POSITION_SUCCESS,\n    ADD_INSTRUCTOR_TO_POSITION_SUCCESS\n} from \"../constants\";\nimport { fetchError, upsertError, deleteError } from \"./errors\";\nimport {\n    actionFactory,\n    runOnActiveSessionChange,\n    validatedApiDispatcher\n} from \"./utils\";\nimport { apiGET, apiPOST } from \"../../libs/apiUtils\";\nimport { positionsReducer } from \"../reducers/positions\";\nimport { createSelector } from \"reselect\";\nimport { instructorsSelector } from \"./instructors\";\n\n// actions\nconst fetchPositionsSuccess = actionFactory(FETCH_POSITIONS_SUCCESS);\nconst fetchOnePositionSuccess = actionFactory(FETCH_ONE_POSITION_SUCCESS);\nconst upsertPositionsSuccess = actionFactory(UPSERT_POSITIONS_SUCCESS);\nconst upsertOnePositionSuccess = actionFactory(UPSERT_ONE_POSITION_SUCCESS);\nconst deleteOnePositionSuccess = actionFactory(DELETE_ONE_POSITION_SUCCESS);\nconst addInstructorToPositionSuccess = actionFactory(\n    ADD_INSTRUCTOR_TO_POSITION_SUCCESS\n);\n\n// dispatchers\nexport const fetchPositions = validatedApiDispatcher({\n    name: \"fetchPositions\",\n    description: \"Fetch positions\",\n    onErrorDispatch: e => fetchError(e.toString()),\n    dispatcher: () => async (dispatch, getState) => {\n        const { id: activeSessionId } = getState().model.sessions.activeSession;\n        const data = await apiGET(`/sessions/${activeSessionId}/positions`);\n        dispatch(fetchPositionsSuccess(data));\n    }\n});\n\nexport const fetchPosition = validatedApiDispatcher({\n    name: \"fetchPosition\",\n    description: \"Fetch position\",\n    propTypes: { id: PropTypes.any.isRequired },\n    onErrorDispatch: e => fetchError(e.toString()),\n    dispatcher: payload => async (dispatch, getState) => {\n        const { id: activeSessionId } = getState().model.sessions.activeSession;\n        const data = await apiGET(\n            `/sessions/${activeSessionId}/positions/${payload.id}`\n        );\n        dispatch(fetchOnePositionSuccess(data));\n    }\n});\n\nexport const upsertPosition = validatedApiDispatcher({\n    name: \"upsertPosition\",\n    description: \"Add/insert position\",\n    propTypes: {},\n    onErrorDispatch: e => upsertError(e.toString()),\n    dispatcher: payload => async (dispatch, getState) => {\n        const { id: activeSessionId } = getState().model.sessions.activeSession;\n        const data = await apiPOST(\n            `/sessions/${activeSessionId}/positions`,\n            payload\n        );\n        dispatch(upsertOnePositionSuccess(data));\n    }\n});\n\nexport const upsertPositions = validatedApiDispatcher({\n    name: \"upsertPositions\",\n    description: \"Add/insert positions\",\n    propTypes: {},\n    onErrorDispatch: e => upsertError(e.toString()),\n    dispatcher: payload => async (dispatch, getState) => {\n        const { id: activeSessionId } = getState().model.sessions.activeSession;\n        let positions = [];\n\n        for (const position of payload) {\n            const data = await apiPOST(\n                `/sessions/${activeSessionId}/positions`,\n                position\n            );\n            positions = [...positions, data];\n        }\n        dispatch(upsertPositionsSuccess(positions));\n    }\n});\n\nexport const deletePosition = validatedApiDispatcher({\n    name: \"deletePosition\",\n    description: \"Delete position\",\n    propTypes: { id: PropTypes.any.isRequired },\n    onErrorDispatch: e => deleteError(e.toString()),\n    dispatcher: payload => async (dispatch, getState) => {\n        const { id: activeSessionId } = getState().model.sessions.activeSession;\n        const data = await apiPOST(\n            `/sessions/${activeSessionId}/positions/delete`,\n            payload\n        );\n        dispatch(deleteOnePositionSuccess(data));\n    }\n});\n\nexport const addInstructorToPosition = validatedApiDispatcher({\n    name: \"addInstructorToPosition\",\n    description: \"Add instructor to position\",\n    propTypes: {\n        instructor: PropTypes.shape({ id: PropTypes.any.isRequired }),\n        position: PropTypes.shape({ id: PropTypes.any.isRequired })\n    },\n    onErrorDispatch: true,\n    dispatcher: payload => async dispatch => {\n        const data = await apiPOST(\n            `/positions/${payload.position.id}/instructors`,\n            payload.instructor\n        );\n        await dispatch(\n            addInstructorToPositionSuccess({\n                position: payload.position,\n                instructors: data\n            })\n        );\n    }\n});\n\n// selectors\n\n// Each reducer is given an isolated state; instead of needed to remember to\n// pass the isolated state to each selector, `reducer._localStoreSelector` will intelligently\n// search for and return the isolated state associated with `reducer`. This is not\n// a standard redux function.\nexport const localStoreSelector = positionsReducer._localStoreSelector;\nconst _positionsSelector = createSelector(\n    localStoreSelector,\n    state => state._modelData\n);\n/**\n * Get the positions, but populate the `instructors` array with the full instructor\n * information.\n */\nexport const positionsSelector = createSelector(\n    [_positionsSelector, instructorsSelector],\n    (positions, instructors) => {\n        // Hash the instructors by `id` for fast lookup\n        const instructorsById = {};\n        for (const instructor of instructors) {\n            instructorsById[instructor.id] = instructor;\n        }\n        // Leave all the data alone, except replace the instructors list\n        // with the full instructor data. Currently, the instructors list\n        // looks like, [{id: xxx}]. I.e., it is only has the `id` field.\n        return positions.map(({ instructors, ...rest }) => ({\n            ...rest,\n            instructors: instructors.map(x => instructorsById[x.id])\n        }));\n    }\n);\n\n// Any time the active session changes, we want to refetch\n// all data. Calling `runOnActiveSessionChange` ensures that\n// when the active session changes all data is re-fetched\nrunOnActiveSessionChange(fetchPositions);\n","import {\n    FETCH_APPLICANTS_SUCCESS,\n    FETCH_ONE_APPLICANT_SUCCESS,\n    UPSERT_ONE_APPLICANT_SUCCESS,\n    DELETE_ONE_APPLICANT_SUCCESS,\n    ADD_APPLICANT_TO_SESSION_SUCCESS\n} from \"../constants\";\nimport { createBasicReducerObject, createReducer } from \"./utils\";\n\nconst initialState = {\n    _modelData: []\n};\n\n// basicReducers is an object whose keys are FETCH_SESSIONS_SUCCESS, etc,\n// and values are the corresponding reducer functions\nconst basicReducers = createBasicReducerObject(\n    FETCH_APPLICANTS_SUCCESS,\n    FETCH_ONE_APPLICANT_SUCCESS,\n    UPSERT_ONE_APPLICANT_SUCCESS,\n    DELETE_ONE_APPLICANT_SUCCESS\n);\n\n/**\n * Produces an array that is the union of `target` and `source`.\n *\n * @param {object[]} target\n * @param {object[]} source\n */\nfunction insertIfMissing(target, source) {\n    const missingItems = [];\n    for (let item of target) {\n        if (!source.some(x => x.id === item.id)) {\n            // the current item is new\n            missingItems.push(item);\n        }\n    }\n    if (missingItems.length > 0) {\n        return target.concat(missingItems);\n    }\n    return target;\n}\n\nexport const applicantsReducer = createReducer(initialState, {\n    ...basicReducers,\n    [ADD_APPLICANT_TO_SESSION_SUCCESS]: (state, action) => ({\n        ...state,\n        _modelData: insertIfMissing(state._modelData, action.payload)\n    })\n});\n","import PropTypes from \"prop-types\";\nimport {\n    FETCH_APPLICANTS_SUCCESS,\n    FETCH_ONE_APPLICANT_SUCCESS,\n    UPSERT_ONE_APPLICANT_SUCCESS,\n    DELETE_ONE_APPLICANT_SUCCESS\n} from \"../constants\";\nimport { fetchError, upsertError, deleteError } from \"./errors\";\nimport {\n    actionFactory,\n    runOnActiveSessionChange,\n    validatedApiDispatcher\n} from \"./utils\";\nimport { apiGET, apiPOST } from \"../../libs/apiUtils\";\nimport { applicantsReducer } from \"../reducers/applicants\";\nimport { createSelector } from \"reselect\";\n\n// actions\nconst fetchApplicantsSuccess = actionFactory(FETCH_APPLICANTS_SUCCESS);\nconst fetchOneApplicantSuccess = actionFactory(FETCH_ONE_APPLICANT_SUCCESS);\nconst upsertOneApplicantSuccess = actionFactory(UPSERT_ONE_APPLICANT_SUCCESS);\nconst deleteOneApplicantSuccess = actionFactory(DELETE_ONE_APPLICANT_SUCCESS);\n\n// dispatchers\nexport const fetchApplicants = validatedApiDispatcher({\n    name: \"fetchApplicants\",\n    description: \"Fetch applicants\",\n    onErrorDispatch: e => fetchError(e.toString()),\n    dispatcher: () => async (dispatch, getState) => {\n        // When we fetch applicants, we only want the applicants associated with the current session\n        const { id: activeSessionId } = getState().model.sessions.activeSession;\n        const data = await apiGET(`/sessions/${activeSessionId}/applicants`);\n        dispatch(fetchApplicantsSuccess(data));\n    }\n});\n\nexport const fetchApplicant = validatedApiDispatcher({\n    name: \"fetchApplicant\",\n    description: \"Fetch applicant\",\n    propTypes: { id: PropTypes.any.isRequired },\n    onErrorDispatch: e => fetchError(e.toString()),\n    dispatcher: payload => async dispatch => {\n        const data = await apiGET(`/applicants/${payload.id}`);\n        dispatch(fetchOneApplicantSuccess(data));\n    }\n});\n\nexport const upsertApplicant = validatedApiDispatcher({\n    name: \"upsertApplicant\",\n    description: \"Add/insert applicant\",\n    propTypes: {},\n    onErrorDispatch: e => upsertError(e.toString()),\n    dispatcher: payload => async dispatch => {\n        const data = await apiPOST(`/applicants`, payload);\n        dispatch(upsertOneApplicantSuccess(data));\n    }\n});\n\nexport const deleteApplicant = validatedApiDispatcher({\n    name: \"deleteApplicant\",\n    description: \"Delete applicant\",\n    propTypes: { id: PropTypes.any.isRequired },\n    onErrorDispatch: e => deleteError(e.toString()),\n    dispatcher: payload => async (dispatch, getState) => {\n        const { id: activeSessionId } = getState().model.sessions.activeSession;\n        const data = await apiPOST(\n            `/sessions/${activeSessionId}/applicants/delete`,\n            payload\n        );\n        dispatch(deleteOneApplicantSuccess(data));\n    }\n});\n\n// selectors\n\n// Each reducer is given an isolated state; instead of needed to remember to\n// pass the isolated state to each selector, `reducer._localStoreSelector` will intelligently\n// search for and return the isolated state associated with `reducer`. This is not\n// a standard redux function.\nexport const localStoreSelector = applicantsReducer._localStoreSelector;\nexport const applicantsSelector = createSelector(\n    localStoreSelector,\n    state => state._modelData\n);\n\n// Any time the active session changes, we want to refetch\n// all data. Calling `runOnActiveSessionChange` ensures that\n// when the active session changes all data is re-fetched\nrunOnActiveSessionChange(fetchApplicants);\n","import {\n    FETCH_ASSIGNMENTS_SUCCESS,\n    FETCH_ONE_ASSIGNMENT_SUCCESS,\n    UPSERT_ONE_ASSIGNMENT_SUCCESS,\n    DELETE_ONE_ASSIGNMENT_SUCCESS\n} from \"../constants\";\nimport { createBasicReducerObject, createReducer } from \"./utils\";\n\nconst initialState = {\n    _modelData: []\n};\n\n// basicReducers is an object whose keys are FETCH_SESSIONS_SUCCESS, etc,\n// and values are the corresponding reducer functions\nconst basicReducers = createBasicReducerObject(\n    FETCH_ASSIGNMENTS_SUCCESS,\n    FETCH_ONE_ASSIGNMENT_SUCCESS,\n    UPSERT_ONE_ASSIGNMENT_SUCCESS,\n    DELETE_ONE_ASSIGNMENT_SUCCESS\n);\n\nexport const assignmentsReducer = createReducer(initialState, basicReducers);\n","import PropTypes from \"prop-types\";\nimport {\n    FETCH_ASSIGNMENTS_SUCCESS,\n    FETCH_ONE_ASSIGNMENT_SUCCESS,\n    UPSERT_ONE_ASSIGNMENT_SUCCESS,\n    DELETE_ONE_ASSIGNMENT_SUCCESS\n} from \"../constants\";\nimport { fetchError, upsertError, deleteError } from \"./errors\";\nimport {\n    actionFactory,\n    runOnActiveSessionChange,\n    validatedApiDispatcher,\n    arrayToHash\n} from \"./utils\";\nimport { apiGET, apiPOST } from \"../../libs/apiUtils\";\nimport { assignmentsReducer } from \"../reducers/assignments\";\nimport { createSelector } from \"reselect\";\nimport { applicantsSelector } from \"./applicants\";\nimport { positionsSelector } from \"./positions\";\n\n// actions\nconst fetchAssignmentsSuccess = actionFactory(FETCH_ASSIGNMENTS_SUCCESS);\nconst fetchOneAssignmentSuccess = actionFactory(FETCH_ONE_ASSIGNMENT_SUCCESS);\nconst upsertOneAssignmentSuccess = actionFactory(UPSERT_ONE_ASSIGNMENT_SUCCESS);\nconst deleteOneAssignmentSuccess = actionFactory(DELETE_ONE_ASSIGNMENT_SUCCESS);\n\n// dispatchers\nexport const fetchAssignments = validatedApiDispatcher({\n    name: \"fetchAssignments\",\n    description: \"Fetch assignments\",\n    onErrorDispatch: e => fetchError(e.toString()),\n    dispatcher: () => async (dispatch, getState) => {\n        const { id: activeSessionId } = getState().model.sessions.activeSession;\n        const data = await apiGET(`/sessions/${activeSessionId}/assignments`);\n        dispatch(fetchAssignmentsSuccess(data));\n    }\n});\n\nexport const fetchAssignment = validatedApiDispatcher({\n    name: \"fetchAssignment\",\n    description: \"Fetch assignment\",\n    propTypes: { id: PropTypes.any.isRequired },\n    onErrorDispatch: e => fetchError(e.toString()),\n    dispatcher: payload => async (dispatch, getState) => {\n        const { id: activeSessionId } = getState().model.sessions.activeSession;\n        const data = await apiGET(\n            `/sessions/${activeSessionId}/assignments/${payload.id}`\n        );\n        dispatch(fetchOneAssignmentSuccess(data));\n    }\n});\n\nexport const upsertAssignment = validatedApiDispatcher({\n    name: \"upsertAssignment\",\n    description: \"Add/insert assignment\",\n    propTypes: {},\n    onErrorDispatch: e => upsertError(e.toString()),\n    dispatcher: payload => async dispatch => {\n        const data = await apiPOST(`/assignments`, payload);\n        dispatch(upsertOneAssignmentSuccess(data));\n    }\n});\n\nexport const deleteAssignment = validatedApiDispatcher({\n    name: \"deleteAssignment\",\n    description: \"Delete assignment\",\n    propTypes: { id: PropTypes.any.isRequired },\n    onErrorDispatch: e => deleteError(e.toString()),\n    dispatcher: payload => async dispatch => {\n        const data = await apiPOST(`/assignments/delete`, payload);\n        dispatch(deleteOneAssignmentSuccess(data));\n    }\n});\n\n// selectors\n\n// Each reducer is given an isolated state; instead of needing to remember to\n// pass the isolated state to each selector, `reducer._localStoreSelector` will intelligently\n// search for and return the isolated state associated with `reducer`. This is not\n// a standard redux function.\nexport const localStoreSelector = assignmentsReducer._localStoreSelector;\n/**\n * Get just the assignment data as it appears in the store; i.e., it has references to\n * id's of applicants and positions.\n */\nconst _assignmentsSelector = createSelector(\n    localStoreSelector,\n    state => state._modelData\n);\n/**\n * Get the current assignments. This selector is memoized and will only\n * be recomputed when assignments, applicants, or positions change.\n */\nexport const assignmentsSelector = createSelector(\n    [_assignmentsSelector, applicantsSelector, positionsSelector],\n    (assignments, applicants, positions) => {\n        if (assignments.length === 0) {\n            return [];\n        }\n        applicants = arrayToHash(applicants);\n        positions = arrayToHash(positions);\n        return assignments.map(({ position_id, applicant_id, ...rest }) => ({\n            ...rest,\n            position: positions[position_id] || {},\n            applicant: applicants[applicant_id] || {}\n        }));\n    }\n);\n\n// Any time the active session changes, we want to refetch\n// all data. Calling `runOnActiveSessionChange` ensures that\n// when the active session changes all data is re-fetched\nrunOnActiveSessionChange(fetchAssignments);\n","import {\n    FETCH_APPLICATIONS_SUCCESS,\n    FETCH_ONE_APPLICATION_SUCCESS,\n    UPSERT_ONE_APPLICATION_SUCCESS,\n    DELETE_ONE_APPLICATION_SUCCESS\n} from \"../constants\";\nimport { createBasicReducerObject, createReducer } from \"./utils\";\n\nconst initialState = {\n    _modelData: []\n};\n\n// basicReducers is an object whose keys are FETCH_SESSIONS_SUCCESS, etc,\n// and values are the corresponding reducer functions\nconst basicReducers = createBasicReducerObject(\n    FETCH_APPLICATIONS_SUCCESS,\n    FETCH_ONE_APPLICATION_SUCCESS,\n    UPSERT_ONE_APPLICATION_SUCCESS,\n    DELETE_ONE_APPLICATION_SUCCESS\n);\n\nexport const applicationsReducer = createReducer(initialState, basicReducers);\n","import PropTypes from \"prop-types\";\nimport {\n    FETCH_APPLICATIONS_SUCCESS,\n    FETCH_ONE_APPLICATION_SUCCESS,\n    UPSERT_ONE_APPLICATION_SUCCESS,\n    DELETE_ONE_APPLICATION_SUCCESS\n} from \"../constants\";\nimport { fetchError, upsertError, deleteError } from \"./errors\";\nimport {\n    actionFactory,\n    runOnActiveSessionChange,\n    validatedApiDispatcher\n} from \"./utils\";\nimport { apiGET, apiPOST } from \"../../libs/apiUtils\";\nimport { applicationsReducer } from \"../reducers/applications\";\nimport { createSelector } from \"reselect\";\n\n// actions\nconst fetchApplicationsSuccess = actionFactory(FETCH_APPLICATIONS_SUCCESS);\nconst fetchOneApplicationSuccess = actionFactory(FETCH_ONE_APPLICATION_SUCCESS);\nconst upsertOneApplicationSuccess = actionFactory(\n    UPSERT_ONE_APPLICATION_SUCCESS\n);\nconst deleteOneApplicationSuccess = actionFactory(\n    DELETE_ONE_APPLICATION_SUCCESS\n);\n\n// dispatchers\nexport const fetchApplications = validatedApiDispatcher({\n    name: \"fetchApplications\",\n    description: \"Fetch applications\",\n    onErrorDispatch: e => fetchError(e.toString()),\n    dispatcher: () => async (dispatch, getState) => {\n        const { id: activeSessionId } = getState().model.sessions.activeSession;\n        const data = await apiGET(`/sessions/${activeSessionId}/applications`);\n        dispatch(fetchApplicationsSuccess(data));\n    }\n});\n\nexport const fetchApplication = validatedApiDispatcher({\n    name: \"fetchApplication\",\n    description: \"Fetch application\",\n    propTypes: { id: PropTypes.any.isRequired },\n    onErrorDispatch: e => fetchError(e.toString()),\n    dispatcher: payload => async (dispatch, getState) => {\n        const { id: activeSessionId } = getState().model.sessions.activeSession;\n        const data = await apiGET(\n            `/sessions/${activeSessionId}/applications/${payload.id}`\n        );\n        dispatch(fetchOneApplicationSuccess(data));\n    }\n});\n\nexport const upsertApplication = validatedApiDispatcher({\n    name: \"upsertApplication\",\n    description: \"Add/insert application\",\n    propTypes: {},\n    onErrorDispatch: e => upsertError(e.toString()),\n    dispatcher: payload => async (dispatch, getState) => {\n        const { id: activeSessionId } = getState().model.sessions.activeSession;\n        const data = await apiPOST(\n            `/sessions/${activeSessionId}/applications`,\n            payload\n        );\n        dispatch(upsertOneApplicationSuccess(data));\n    }\n});\n\nexport const deleteApplication = validatedApiDispatcher({\n    name: \"deleteApplication\",\n    description: \"Delete application\",\n    propTypes: { id: PropTypes.any.isRequired },\n    onErrorDispatch: e => deleteError(e.toString()),\n    dispatcher: payload => async (dispatch, getState) => {\n        const { id: activeSessionId } = getState().model.sessions.activeSession;\n        const data = await apiPOST(\n            `/sessions/${activeSessionId}/applications/delete`,\n            payload\n        );\n        dispatch(deleteOneApplicationSuccess(data));\n    }\n});\n\n// selectors\n\n// Each reducer is given an isolated state; instead of needed to remember to\n// pass the isolated state to each selector, `reducer._localStoreSelector` will intelligently\n// search for and return the isolated state associated with `reducer`. This is not\n// a standard redux function.\nexport const localStoreSelector = applicationsReducer._localStoreSelector;\nexport const applicationsSelector = createSelector(\n    localStoreSelector,\n    state => state._modelData\n);\n\n// Any time the active session changes, we want to refetch\n// all data. Calling `runOnActiveSessionChange` ensures that\n// when the active session changes all data is re-fetched\nrunOnActiveSessionChange(fetchApplications);\n","import {\n    FETCH_POSITION_TEMPLATES_SUCCESS,\n    FETCH_ONE_POSITION_TEMPLATE_SUCCESS,\n    UPSERT_ONE_POSITION_TEMPLATE_SUCCESS,\n    DELETE_ONE_POSITION_TEMPLATE_SUCCESS,\n    FETCH_ALL_POSITION_TEMPLATES_SUCCESS\n} from \"../constants\";\nimport { createBasicReducerObject, createReducer } from \"./utils\";\n\nconst initialState = {\n    _modelData: [],\n    all: []\n};\n\n// basicReducers is an object whose keys are FETCH_*_SUCCESS, etc,\n// and values are the corresponding reducer functions\nconst basicReducers = createBasicReducerObject(\n    FETCH_POSITION_TEMPLATES_SUCCESS,\n    FETCH_ONE_POSITION_TEMPLATE_SUCCESS,\n    UPSERT_ONE_POSITION_TEMPLATE_SUCCESS,\n    DELETE_ONE_POSITION_TEMPLATE_SUCCESS\n);\n\nexport const positionTemplatesReducer = createReducer(initialState, {\n    ...basicReducers,\n    [FETCH_ALL_POSITION_TEMPLATES_SUCCESS]: (state, action) => ({\n        ...state,\n        all: action.payload\n    })\n});\n","import PropTypes from \"prop-types\";\nimport {\n    FETCH_POSITION_TEMPLATES_SUCCESS,\n    FETCH_ONE_POSITION_TEMPLATE_SUCCESS,\n    UPSERT_ONE_POSITION_TEMPLATE_SUCCESS,\n    DELETE_ONE_POSITION_TEMPLATE_SUCCESS,\n    FETCH_ALL_POSITION_TEMPLATES_SUCCESS\n} from \"../constants\";\nimport { fetchError, upsertError, deleteError } from \"./errors\";\nimport {\n    actionFactory,\n    runOnActiveSessionChange,\n    validatedApiDispatcher\n} from \"./utils\";\nimport { apiGET, apiPOST } from \"../../libs/apiUtils\";\nimport { positionTemplatesReducer } from \"../reducers/position_templates\";\nimport { createSelector } from \"reselect\";\n\n// actions\nconst fetchPositionTemplatesSuccess = actionFactory(\n    FETCH_POSITION_TEMPLATES_SUCCESS\n);\nconst fetchAllPositionTemplatesSuccess = actionFactory(\n    FETCH_ALL_POSITION_TEMPLATES_SUCCESS\n);\nconst fetchOnePositionTemplateSuccess = actionFactory(\n    FETCH_ONE_POSITION_TEMPLATE_SUCCESS\n);\nconst upsertOnePositionTemplateSuccess = actionFactory(\n    UPSERT_ONE_POSITION_TEMPLATE_SUCCESS\n);\nconst deleteOnePositionTemplateSuccess = actionFactory(\n    DELETE_ONE_POSITION_TEMPLATE_SUCCESS\n);\n\n// dispatchers\nexport const fetchPositionTemplates = validatedApiDispatcher({\n    name: \"fetchPositionTemplates\",\n    description: \"Fetch position_templates\",\n    onErrorDispatch: e => fetchError(e.toString()),\n    dispatcher: () => async (dispatch, getState) => {\n        const { id: activeSessionId } = getState().model.sessions.activeSession;\n        const data = await apiGET(\n            `/sessions/${activeSessionId}/position_templates`\n        );\n        dispatch(fetchPositionTemplatesSuccess(data));\n    }\n});\n\nexport const fetchPositionTemplate = validatedApiDispatcher({\n    name: \"fetchPositionTemplate\",\n    description: \"Fetch position_template\",\n    propTypes: { id: PropTypes.any.isRequired },\n    onErrorDispatch: e => fetchError(e.toString()),\n    dispatcher: payload => async (dispatch, getState) => {\n        const { id: activeSessionId } = getState().model.sessions.activeSession;\n        const data = await apiGET(\n            `/sessions/${activeSessionId}/position_templates/${payload.id}`\n        );\n        dispatch(fetchOnePositionTemplateSuccess(data));\n    }\n});\n\nexport const upsertPositionTemplate = validatedApiDispatcher({\n    name: \"upsertPositionTemplate\",\n    description: \"Add/insert position_template\",\n    propTypes: {},\n    onErrorDispatch: e => upsertError(e.toString()),\n    dispatcher: payload => async (dispatch, getState) => {\n        const { id: activeSessionId } = getState().model.sessions.activeSession;\n        const data = await apiPOST(\n            `/sessions/${activeSessionId}/position_templates`,\n            payload\n        );\n        dispatch(upsertOnePositionTemplateSuccess(data));\n    }\n});\n\nexport const deletePositionTemplate = validatedApiDispatcher({\n    name: \"deletePositionTemplate\",\n    description: \"Delete position_template\",\n    propTypes: { id: PropTypes.any.isRequired },\n    onErrorDispatch: e => deleteError(e.toString()),\n    dispatcher: payload => async (dispatch, getState) => {\n        const { id: activeSessionId } = getState().model.sessions.activeSession;\n        const data = await apiPOST(\n            `/sessions/${activeSessionId}/position_templates/delete`,\n            payload\n        );\n        dispatch(deleteOnePositionTemplateSuccess(data));\n    }\n});\n\nexport const fetchAllPositionTemplates = validatedApiDispatcher({\n    name: \"fetchAllPositionTemplates\",\n    description: \"Fetch all available position_templates\",\n    onErrorDispatch: e => fetchError(e.toString()),\n    dispatcher: () => async dispatch => {\n        const data = await apiGET(`/available_position_templates`);\n        dispatch(fetchAllPositionTemplatesSuccess(data));\n    }\n});\n\n// selectors\n\n// Each reducer is given an isolated state; instead of needed to remember to\n// pass the isolated state to each selector, `reducer._localStoreSelector` will intelligently\n// search for and return the isolated state associated with `reducer`. This is not\n// a standard redux function.\nexport const localStoreSelector = positionTemplatesReducer._localStoreSelector;\nexport const positionTemplatesSelector = createSelector(\n    localStoreSelector,\n    state => state._modelData\n);\n\n// Any time the active session changes, we want to refetch\n// all data. Calling `runOnActiveSessionChange` ensures that\n// when the active session changes all data is re-fetched\nrunOnActiveSessionChange(fetchPositionTemplates);\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport { NavLink, Switch, Route } from \"react-router-dom\";\n\nimport \"./main.css\";\nimport { Navbar, Nav } from \"react-bootstrap\";\nimport { ToggleMockApi } from \"../../components/mockAPI\";\nimport { fetchSessions } from \"../../api/actions\";\n\nimport SwaggerUI from \"swagger-ui-react\";\nimport \"swagger-ui-react/swagger-ui.css\";\nimport { mockApiRoutesAsSwaggerPaths } from \"../../api/defs/doc-generation\";\nimport { mockAPI } from \"../../api/mockAPI\";\n\n/**\n * Wrap `\"react-router-dom\"`'s `NavLink` in Bootstrap\n * styling.\n *\n * @param {*} props\n * @returns\n */\nfunction BootstrapNavLink(props) {\n    return (\n        <Nav.Link\n            as={NavLink}\n            activeClassName=\"bg-warning text-dark\"\n            to={props.to}\n        >\n            {props.children}\n        </Nav.Link>\n    );\n}\nBootstrapNavLink.propTypes = {\n    to: PropTypes.string\n};\n\nconst swaggerData = {\n    openapi: \"3.0.0\",\n    info: {\n        description:\n            \"TAPP is a program for TA management--for making TA assignments and distributing TA contracts.\",\n        title: \"TAPP\"\n    },\n    servers: [{ url: \"/api/v1\" }],\n    paths: {\n        /* XXX this is hear temporarily to serve as an example for generating Swagger (openapi) documenation\n        \"/bob\": {\n            get: {\n                summary: \"Bob's summary\",\n                tags: [\"helful\"],\n                produces: \"application/json\",\n                responses: {\n                    default: {\n                        description: \"OK\",\n                        content: {\n                            \"application/json\": {\n                                schema: {\n                                    type: \"object\",\n                                    properties: {\n                                        status: {\n                                            type: \"string\",\n                                            enum: [\"success\", \"error\"]\n                                        },\n                                        message: { type: \"string\" },\n                                        payload: {\n                                            type: \"array\",\n                                            items: {\n                                                type: \"object\",\n                                                properties: {\n                                                    name: { type: \"string\" }\n                                                },\n                                                required: [\"name\"]\n                                            }\n                                        }\n                                    },\n                                    required: [\"status\"]\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        },\n*/\n        ...mockApiRoutesAsSwaggerPaths(mockAPI)\n    }\n};\n\n// When toggled, `ToggleMockApi` will try\n// to refetch all the sessions, so pass it an\n// appropriate dispatcher.\nconst ConnectedToggleMockApi = connect(\n    null,\n    { fetchSessions }\n)(ToggleMockApi);\n\nfunction DevFrame(props) {\n    return (\n        <div id=\"dev-frame\" className=\"bg-info\">\n            <div id=\"dev-frame-header\">\n                <Navbar expand variant=\"dark\">\n                    <Navbar.Brand\n                        href=\"#/\"\n                        title=\"View TAPP in development mode in a framed window.\"\n                    >\n                        Dev Mode\n                    </Navbar.Brand>\n                    <Nav className=\"mr-auto\">\n                        <BootstrapNavLink to=\"/dashboard\">\n                            Dashboard\n                        </BootstrapNavLink>\n                    </Nav>\n                    <Nav className=\"mr-auto\">\n                        <BootstrapNavLink to=\"/api-docs\">\n                            API Docs\n                        </BootstrapNavLink>\n                    </Nav>\n                    <Navbar.Collapse className=\"justify-content-end\">\n                        <ConnectedToggleMockApi />\n                    </Navbar.Collapse>\n                </Navbar>\n            </div>\n            <div id=\"dev-frame-body\">\n                <div id=\"dev-frame-body-inner\">\n                    <Switch>\n                        <Route path=\"/api-docs\">\n                            <SwaggerUI spec={swaggerData} docExpansion=\"list\" />\n                        </Route>\n                        <Route>{props.children}</Route>\n                    </Switch>\n                </div>\n            </div>\n            <div id=\"dev-frame-footer\"></div>\n        </div>\n    );\n}\n\nexport { DevFrame };\n","/*\n * A collection of untilty functions for interfacing with urls\n */\n\n/**\n * Try to parse `s` as a native javascript type. E.g., \"45.6\" will\n * be parsed as a number, \"true\" will be parsed as `true`, \"[]\"\n * will be parsed as an empty array.\n *\n * @param {string} s\n * @returns\n */\nfunction stringToNativeType(s) {\n    try {\n        return JSON.parse(s);\n    } catch (e) {\n        return s;\n    }\n}\n\nfunction parseURLSearchString(s) {\n    const searchParams = new URLSearchParams(s);\n    const ret = {};\n    for (const [key, val] of searchParams.entries()) {\n        ret[key] = stringToNativeType(val);\n    }\n    return ret;\n}\n\nexport { stringToNativeType, parseURLSearchString };\n","/**\n * Notifications popup whenever they show up in state.ui.notifications\n */\nimport { connect } from \"react-redux\";\nimport Notifications from \"react-notification-system-redux\";\n\nexport const ConnectedNotifications = connect(state => ({\n    notifications: state.ui.notifications\n}))(Notifications);\n","import { SET_SELECTED_ROWS } from \"./constants\";\n\n// actions\nexport const setSelectedRows = data => ({\n    type: SET_SELECTED_ROWS,\n    payload: data\n});\n\n// selectors\nexport const offerTableSelector = state => state.ui.offerTable;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Dropdown, FormControl } from \"react-bootstrap\";\n/**\n * react-bootstrap dropdown menu that is filterable. Expects\n * children which are `Dropdown.Item` and contain just text\n * as content. To use, set as the `as=` attribute on a `Dropdown.Menu`.\n *\n * Notes: Because of the way react-bootstrap works, this\n * component must be wrapped in a `React.formwardRef`.\n */\nconst FilterableMenuContents = React.forwardRef((props, ref) => {\n    const { children, style, className, clearFilter } = props;\n    const [filter, setFilter] = React.useState(\"\");\n    // If the `clearFilter` flag is set, make sure we start\n    // with an empty filter. This is used to clear the filter when the\n    // widget is hidden.\n    React.useEffect(() => {\n        if (clearFilter) {\n            setFilter(\"\");\n        }\n    }, [clearFilter]);\n    function onChange(e) {\n        setFilter(e.currentTarget.value);\n    }\n    // Filter the child `Dropdown.Item` items\n    const sessionList = React.Children.toArray(children).filter(\n        child =>\n            !filter.trim() ||\n            child.props.children.toLowerCase().includes(filter.trim())\n    );\n    // The sessions list could be empty for two reasons: there are\n    // no sessions, or we've filtered them all away. Display an\n    // appropriate message in either case\n    const emptyListMessage =\n        children.length === 0\n            ? \"No Available Sessions\"\n            : \"No Matching Sessions\";\n    return (\n        <div style={style} className={className} ref={ref}>\n            <FormControl\n                autoFocus\n                className=\"mx-3 my-2 w-auto\"\n                placeholder=\"Type to filter...\"\n                title=\"Filter sessions\"\n                onChange={onChange}\n                value={filter}\n                tabIndex={0}\n            />\n            <ul className=\"list-unstyled my-0\">\n                {sessionList.length > 0 ? (\n                    sessionList\n                ) : (\n                    <li className=\"dropdown-item text-muted\">\n                        {emptyListMessage}\n                    </li>\n                )}\n            </ul>\n        </div>\n    );\n});\n/**\n * A menu that nests inside a `Dropdown`. Pass in a list\n * `items` which are objects of the form `{id: ..., name: ...}`.\n * When `onSelect` is triggered, it will be passed the index of the clicked-upon\n * item in the `items` array.\n *\n * @param {*} props\n * @returns\n */\nexport function FilterableMenu(props) {\n    const { items, activeItemId, clearFilter } = props;\n    return (\n        <Dropdown.Menu as={FilterableMenuContents} clearFilter={clearFilter}>\n            {items.map((s, index) => (\n                <Dropdown.Item\n                    key={s.id}\n                    eventKey={index}\n                    active={activeItemId === s.id}\n                >\n                    {s.name}\n                </Dropdown.Item>\n            ))}\n        </Dropdown.Menu>\n    );\n}\nFilterableMenu.propTypes = {\n    items: PropTypes.arrayOf(\n        PropTypes.shape({\n            id: PropTypes.any.isRequired,\n            name: PropTypes.string.isRequired\n        })\n    ),\n    activeItemId: PropTypes.any,\n    clearFilter: PropTypes.bool\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Dropdown } from \"react-bootstrap\";\nimport { FilterableMenu } from \"./filterable-menu\";\n\n/**\n * Displays and selects a session\n *\n * @export\n * @param {*} props\n * @returns\n */\nexport function SessionSelect(props) {\n    const { sessions, activeSession, setActiveSession } = props;\n    // keep track of the dropdown visibility so that the filter can be cleared\n    // whenever the dropdown is invisible.\n    const [dropdownVisible, setDropdownVisible] = React.useState(false);\n\n    const activeSessionId = (activeSession || {}).id;\n    const label = !activeSessionId ? (\n        <span className=\"text-secondary mr-2\">Select a Session</span>\n    ) : (\n        <span className=\"text-primary mr-2\">{activeSession.name}</span>\n    );\n    return (\n        <div>\n            <h3>Select Session</h3>\n            <Dropdown\n                onSelect={i => {\n                    setActiveSession(sessions[i]);\n                }}\n                onToggle={desiredVisibility =>\n                    setDropdownVisible(desiredVisibility)\n                }\n                show={dropdownVisible}\n            >\n                <Dropdown.Toggle split variant=\"light\">\n                    {label}\n                </Dropdown.Toggle>\n                <FilterableMenu\n                    items={sessions}\n                    activeItemId={activeSessionId}\n                    clearFilter={!dropdownVisible}\n                />\n            </Dropdown>\n        </div>\n    );\n}\nSessionSelect.propTypes = {\n    setActiveSession: PropTypes.func.isRequired,\n    sessions: PropTypes.array.isRequired,\n    activeSession: PropTypes.object\n};\n","import React from \"react\";\nimport { Form, Col } from \"react-bootstrap\";\n\n/**\n * A higher-order-function which returns a function that creates editable fields.\n * For example, `fieldEditorFactory(x, setX)(\"I set foo\", \"foo\", \"number\")` returns\n * a react `<input />` element that will call `setX({...x, foo: <new foo val>})` whenever\n * the input changes.\n *\n * A `type=` parameter can be passed in; when used, some types are coerced. For example,\n * `type=number` will automatically coerce strings to numbers so `setBoundData` would be\n * passed an object with the specified attribute cast as a number.\n *\n * @export\n * @param {object} boundData - object whose attributes will be (non-destructively) set\n * @param {function(object): void} setBoundData - setter function\n * @returnType {function(title: string, attr: string, type: string, inputAttrs: object): React.Node}\n */\nexport function fieldEditorFactory(boundData, setBoundData) {\n    /**\n     * Create a callback function which updates the specified attribute.\n     *\n     * @param {string} attr\n     * @returns\n     */\n    function setAttrFactory(attr, coerceFunc = x => x) {\n        return e => {\n            const newVal = e.target.value || \"\";\n            const newData = { ...boundData, [attr]: coerceFunc(newVal) };\n            setBoundData(newData);\n        };\n    }\n\n    /**\n     * Create a bootstrap form component that updates the specified attr\n     * of `boundData`\n     *\n     * @param {string} title - Label text of the form control\n     * @param {string} attr - attribute of `boundData` to be updated when this form control changes\n     * @param {string?} type - the type of the `<input />` element\n     * @param {object?} inputAttrs - additional attributes to be passed to the `<input />` element\n     * @returnType {React.Node}\n     */\n    function createFieldEditor(title, attr, type = \"text\", inputAttrs = {}) {\n        // Function called on the value before it is passed to setBoundData\n        let coerceFunc = x => x;\n        // Function that is called on the value before it is passed to the `<input />`\n        // element\n        let valueFunc = x => x || \"\";\n\n        // depending on the type we want to coerce values appropriately\n        switch (type) {\n            case \"number\":\n                coerceFunc = Number;\n                break;\n            case \"date\":\n                coerceFunc = x => new Date(x).toISOString();\n                valueFunc = x => {\n                    try {\n                        return new Date(x).toISOString().slice(0, 10);\n                    } catch (e) {\n                        return \"\";\n                    }\n                };\n                break;\n            default:\n                break;\n        }\n\n        return (\n            <React.Fragment>\n                <Form.Label>{title}</Form.Label>\n                <Form.Control\n                    type={type}\n                    value={valueFunc(boundData[attr])}\n                    onChange={setAttrFactory(attr, coerceFunc)}\n                    {...inputAttrs}\n                />\n            </React.Fragment>\n        );\n    }\n\n    return createFieldEditor;\n}\n\n/**\n * Place all children side-by-side in a react-boostrap `Form.Row`\n *\n * @export\n * @param {*} props\n * @returnType {React.Node}\n */\nexport function DialogRow(props) {\n    const { children } = props;\n    return (\n        <Form.Row style={{ alignItems: \"baseline\" }}>\n            {React.Children.map(children, (child, index) => {\n                return (\n                    <Form.Group as={Col} key={index}>\n                        {child}\n                    </Form.Group>\n                );\n            })}\n        </Form.Row>\n    );\n}\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Form } from \"react-bootstrap\";\nimport { docApiPropTypes } from \"../../api/defs/doc-generation\";\nimport { fieldEditorFactory, DialogRow } from \"./common-controls\";\n/**\n * Edit a session\n *\n * @export\n * @param {{session: object, setSession: function}} props\n * @returns\n */\nexport function SessionEditor(props) {\n    const { session, setSession } = props;\n\n    const createFieldEditor = fieldEditorFactory(session, setSession);\n\n    return (\n        <Form>\n            <DialogRow>\n                {createFieldEditor(\"Session Name (e.g. 2019 Fall)\", \"name\")}\n                {createFieldEditor(\"Start Date\", \"start_date\", \"date\")}\n                {createFieldEditor(\"End Date\", \"end_date\", \"date\")}\n            </DialogRow>\n            <DialogRow>\n                {createFieldEditor(\n                    \"Rate 1 (pre-January rate)\",\n                    \"rate1\",\n                    \"number\",\n                    {\n                        step: \"0.01\",\n                        min: 0\n                    }\n                )}\n                {createFieldEditor(\n                    \"Rate 2 (post-January rate)\",\n                    \"rate2\",\n                    \"number\",\n                    {\n                        step: \"0.01\",\n                        min: 0\n                    }\n                )}\n            </DialogRow>\n        </Form>\n    );\n}\nSessionEditor.propTypes = {\n    session: docApiPropTypes.session.isRequired,\n    setSession: PropTypes.func.isRequired\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nexport class ApplicantsList extends React.Component {\n    static propTypes = {\n        applicants: PropTypes.arrayOf(\n            PropTypes.shape({\n                first_name: PropTypes.string,\n                last_name: PropTypes.string\n            })\n        ).isRequired\n    };\n    render() {\n        const { applicants } = this.props;\n        let applicantsList = <div>No Applicants...</div>;\n        if (applicants.length > 0) {\n            applicantsList = (\n                <ul>\n                    {applicants.map(applicant => (\n                        <li key={applicant.id}>\n                            {applicant.first_name} {applicant.last_name}\n                        </li>\n                    ))}\n                </ul>\n            );\n        }\n        return (\n            <div>\n                <h3>Available Applicants</h3>\n                {applicantsList}\n            </div>\n        );\n    }\n}\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./components.css\";\n\nexport class PositionTemplatesList extends React.Component {\n    static propTypes = {\n        position_templates: PropTypes.arrayOf(\n            PropTypes.shape({\n                position_type: PropTypes.string,\n                offer_template: PropTypes.string\n            })\n        ).isRequired\n    };\n    render() {\n        const { position_templates } = this.props;\n        let templateList = <div>No Templates...</div>;\n        if (position_templates.length > 0) {\n            templateList = (\n                <ul>\n                    {position_templates.map(template => (\n                        <li key={template.offer_template}>\n                            <span className=\"position-type\">\n                                {template.position_type}\n                            </span>\n                            , {template.offer_template}\n                        </li>\n                    ))}\n                </ul>\n            );\n        }\n        return (\n            <div className=\"template-list\">\n                <h3>Available Templates</h3>\n                {templateList}\n            </div>\n        );\n    }\n}\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport ReactTable from \"react-table\";\nimport { docApiPropTypes } from \"../api/defs/doc-generation\";\nimport { Col, Form } from \"react-bootstrap\";\n\nconst DEFAULT_COLUMNS = [\n    { Header: \"Last Name\", accessor: \"last_name\" },\n    { Header: \"First Name\", accessor: \"first_name\" },\n    { Header: \"UTORid\", accessor: \"utorid\" }\n];\n\n/**\n * List the instructors using a ReactTable. `columns` can be passed\n * in to customize columns/cell renderers.\n *\n * @export\n * @param {{instructors: object[], columns: object[]}} props\n * @returns\n */\nexport function InstructorsList(props) {\n    const { instructors, columns = DEFAULT_COLUMNS } = props;\n    return (\n        <React.Fragment>\n            <h3>Instructors</h3>\n            <ReactTable\n                data={instructors}\n                columns={columns}\n                showPagination={false}\n                minRows={1}\n            />\n        </React.Fragment>\n    );\n}\nInstructorsList.propTypes = {\n    instructors: PropTypes.arrayOf(docApiPropTypes.instructor).isRequired,\n    columns: PropTypes.arrayOf(\n        PropTypes.shape({ Header: PropTypes.any.isRequired })\n    )\n};\n\nconst DEFAULT_INSTRUCTOR = {\n    utorid: \"\",\n    last_name: \"\",\n    first_name: \"\"\n};\n\n/**\n * Edit information about an instructor.\n *\n * @export\n * @param {{instructor: object, setInstructor: function}} props\n * @returns\n */\nexport function InstructorEditor(props) {\n    const { instructor: instructorProps, setInstructor } = props;\n    const instructor = { ...DEFAULT_INSTRUCTOR, ...instructorProps };\n\n    /**\n     * Create a callback function which updates the specified attribute\n     * of a position.\n     *\n     * @param {string} attr\n     * @returns\n     */\n    function setAttrFactory(attr) {\n        return e => {\n            const newVal = e.target.value || \"\";\n            const newInstructor = { ...instructor, [attr]: newVal };\n            setInstructor(newInstructor);\n        };\n    }\n\n    /**\n     * Create a bootstrap form component that updates the specified attr\n     * of `position`\n     *\n     * @param {string} title - Label text of the form control\n     * @param {string} attr - attribute of `position` to be updated when this form control changes\n     * @returns {node}\n     */\n    function createFieldEditor(title, attr, type = \"text\") {\n        return (\n            <React.Fragment>\n                <Form.Label>{title}</Form.Label>\n                <Form.Control\n                    type={type}\n                    value={instructor[attr] || \"\"}\n                    onChange={setAttrFactory(attr)}\n                />\n            </React.Fragment>\n        );\n    }\n\n    return (\n        <Form>\n            <Form.Row>\n                <Form.Group as={Col}>\n                    {createFieldEditor(\"First Name\", \"first_name\")}\n                </Form.Group>\n                <Form.Group as={Col}>\n                    {createFieldEditor(\"Last Name\", \"last_name\")}\n                </Form.Group>\n                <Form.Group as={Col}>\n                    {createFieldEditor(\"UTORid\", \"utorid\")}\n                </Form.Group>\n            </Form.Row>\n        </Form>\n    );\n}\nInstructorEditor.propTypes = {\n    instructor: docApiPropTypes.instructor,\n    setInstructor: PropTypes.func\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { FaEdit } from \"react-icons/fa\";\nimport { Modal, Button } from \"react-bootstrap\";\n\nimport \"./edit-field-widgets.css\";\n\n/**\n * A dialog allowing one to edit `props.value`. `onChagne` is called\n * when \"save\" is clicked while editing this value.\n *\n * @param {*} props\n * @returns\n */\nfunction EditFieldDialog(props) {\n    const { title, value, show, onHide, onChange } = props;\n    const [fieldVal, setFieldVal] = React.useState(value);\n\n    function cancelClick() {\n        setFieldVal(value);\n        onHide();\n    }\n\n    function saveClick() {\n        // eslint-disable-next-line\n        if (fieldVal != value) {\n            // Only call `onChange` if the value has changed\n            onChange(fieldVal, value);\n        }\n        onHide();\n    }\n\n    const changeIndicator =\n        // eslint-disable-next-line\n        fieldVal == value ? null : (\n            <span>\n                Change from{\" \"}\n                <span className=\"field-dialog-formatted-name\">{value}</span> to{\" \"}\n                <span className=\"field-dialog-formatted-name\">{fieldVal}</span>\n            </span>\n        );\n\n    return (\n        <Modal show={show} onHide={cancelClick}>\n            <Modal.Header closeButton>\n                <Modal.Title>{title}</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <input\n                    type=\"text\"\n                    value={fieldVal}\n                    onChange={e => setFieldVal(e.currentTarget.value)}\n                />{\" \"}\n                {changeIndicator}\n            </Modal.Body>\n            <Modal.Footer>\n                <Button onClick={cancelClick} variant=\"outline-secondary\">\n                    Cancel\n                </Button>\n                <Button onClick={saveClick}>Save</Button>\n            </Modal.Footer>\n        </Modal>\n    );\n}\n\n/**\n * An edit icon that appears on hover.\n *\n * @param {*} props\n * @returns\n */\nfunction EditFieldIcon(props) {\n    const { title, hidden, onClick } = props;\n    if (hidden) {\n        return null;\n    }\n    return (\n        <div\n            className=\"show-on-hover edit-glyph\"\n            onClick={onClick}\n            title={title}\n        >\n            <FaEdit />\n        </div>\n    );\n}\n\n/**\n * Adds an \"edit\" icon which shows up when hovering on the wrapped widget.\n * Clicking the \"edit\" icon opens a dialog that allows one to edit the value.\n * `onChange` is called if \"save\" is pressed in the edit dialog.\n *\n * @export\n * @param {*} props\n * @returns\n */\nexport function EditableField(props) {\n    const { children, title, value, onChange, editable = true } = props;\n    const [dialogShow, setDialogShow] = React.useState(false);\n    return (\n        <div className=\"show-on-hover-wrapper\">\n            {children}\n            <EditFieldIcon\n                title={title}\n                hidden={!editable}\n                onClick={() => setDialogShow(true)}\n            />\n            <EditFieldDialog\n                title={title}\n                value={value}\n                onChange={onChange}\n                show={dialogShow}\n                onHide={() => setDialogShow(false)}\n            />\n        </div>\n    );\n}\nEditFieldDialog.propTypes = {\n    title: PropTypes.node,\n    value: PropTypes.any.isRequired,\n    onChange: PropTypes.func,\n    editable: PropTypes.bool\n};\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { instructorsSelector, upsertInstructor } from \"../../api/actions\";\nimport { InstructorsList } from \"../../components/instructors\";\nimport { EditableField } from \"../../components/edit-field-widgets\";\n\n/**\n * A cell that renders editable applicant information\n *\n * @param {*} props\n * @returns\n */\nfunction EditableCell(props) {\n    const title = `Edit ${props.column.Header}`;\n    const { upsertInstructor, field } = props;\n    function onChange(newVal) {\n        const applicantId = props.original.id;\n        upsertInstructor({ id: applicantId, [field]: newVal });\n    }\n    return (\n        <EditableField\n            title={title}\n            value={props.value || \"\"}\n            onChange={onChange}\n        >\n            {props.value}\n        </EditableField>\n    );\n}\n\nfunction EditableInstructorsList(props) {\n    const { upsertInstructor, ...rest } = props;\n\n    // Bind an `ApplicantCell` to a particular field\n    function generateCell(field) {\n        return props => (\n            <EditableCell\n                field={field}\n                upsertInstructor={upsertInstructor}\n                {...props}\n            />\n        );\n    }\n\n    const columns = [\n        {\n            Header: \"Last Name\",\n            accessor: \"last_name\",\n            Cell: generateCell(\"last_name\")\n        },\n        {\n            Header: \"First Name\",\n            accessor: \"first_name\",\n            Cell: generateCell(\"first_name\")\n        },\n        {\n            Header: \"UTORid\",\n            accessor: \"utorid\",\n            Cell: generateCell(\"utorid\")\n        }\n    ];\n\n    return <InstructorsList columns={columns} {...rest} />;\n}\n\n/**\n * EditableInstructorsList that has been connected to the redux store\n * for live updates and editability.\n */\nexport const ConnectedInstructorsList = connect(\n    state => ({\n        instructors: instructorsSelector(state)\n    }),\n    { upsertInstructor }\n)(EditableInstructorsList);\n","/**\n * Trims the input string. If the `x` is not a string, it is\n * coerced\n *\n * @param {string} x\n * @returns\n */\nexport function strip(x) {\n    if (x == null) {\n        return \"\";\n    }\n    return (\"\" + x).trim();\n}\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { InstructorEditor } from \"../../components/instructors\";\nimport { Modal, Button, Alert } from \"react-bootstrap\";\nimport { upsertInstructor, instructorsSelector } from \"../../api/actions\";\nimport { strip } from \"../../libs/utils\";\n\nconst BLANK_INSTRUCTOR = {\n    first_name: \"\",\n    last_name: \"\",\n    utorid: \"\"\n};\n\n/**\n * Find if there is a conflicting instructor in the passed in list\n * of instructors, or if any required fields are incorrect.\n *\n * @param {object} instructor\n * @param {object[]} instructors\n */\nfunction getConficts(instructor, instructors) {\n    const ret = { delayShow: \"\", immediateShow: \"\" };\n    if (\n        !strip(instructor.utorid) ||\n        !strip(instructor.first_name) ||\n        !strip(instructor.last_name)\n    ) {\n        ret.delayShow = \"A first name, last name, and utorid is required\";\n    }\n    const matchingInstructor = instructors.find(\n        x => strip(x.utorid) === strip(instructor.utorid)\n    );\n    if (matchingInstructor) {\n        ret.immediateShow = (\n            <p>\n                Another instructor exists with utorid={instructor.utorid}:{\" \"}\n                <b>\n                    {matchingInstructor.first_name}{\" \"}\n                    {matchingInstructor.last_name}\n                </b>\n            </p>\n        );\n    }\n    return ret;\n}\n\nfunction AddInstructorDialog(props) {\n    const { show, onHide = () => {}, instructors, upsertInstructor } = props;\n    const [newInstructor, setNewInstructor] = React.useState(BLANK_INSTRUCTOR);\n\n    React.useEffect(() => {\n        if (!show) {\n            // If the dialog is hidden, reset the state\n            setNewInstructor(BLANK_INSTRUCTOR);\n        }\n    }, [show]);\n\n    function createInstructor() {\n        upsertInstructor(newInstructor);\n        onHide();\n    }\n\n    const conflicts = getConficts(newInstructor, instructors);\n\n    return (\n        <Modal show={show} onHide={onHide}>\n            <Modal.Header closeButton>\n                <Modal.Title>Add Instructor</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <InstructorEditor\n                    instructor={newInstructor}\n                    setInstructor={setNewInstructor}\n                />\n                {conflicts.immediateShow ? (\n                    <Alert variant=\"danger\">{conflicts.immediateShow}</Alert>\n                ) : null}\n            </Modal.Body>\n            <Modal.Footer>\n                <Button onClick={onHide} variant=\"light\">\n                    Cancel\n                </Button>\n                <Button\n                    onClick={createInstructor}\n                    title={conflicts.delayShow || \"Create Instructor\"}\n                    disabled={\n                        !!conflicts.delayShow || !!conflicts.immediateShow\n                    }\n                >\n                    Create Instructor\n                </Button>\n            </Modal.Footer>\n        </Modal>\n    );\n}\n/**\n * AddInstructorDialog that has been connected to the redux store\n */\nexport const ConnectedAddInstructorDialog = connect(\n    state => ({ instructors: instructorsSelector(state) }),\n    { upsertInstructor }\n)(AddInstructorDialog);\n","import React from \"react\";\nimport { ConnectedInstructorsList } from \"./editable-instructors-list\";\nimport { ConnectedAddInstructorDialog } from \"./add-instructor-dialog\";\nimport { Button } from \"react-bootstrap\";\n\nexport function AdminIstructorsView() {\n    const [addDialogVisible, setAddDialogVisible] = React.useState(false);\n    return (\n        <div>\n            <Button\n                onClick={() => {\n                    setAddDialogVisible(true);\n                }}\n            >\n                Add Instructor\n            </Button>\n            <ConnectedAddInstructorDialog\n                show={addDialogVisible}\n                onHide={() => {\n                    setAddDialogVisible(false);\n                }}\n            />\n            <ConnectedInstructorsList />\n        </div>\n    );\n}\n\nexport { ConnectedInstructorsList, ConnectedAddInstructorDialog };\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport ReactTable from \"react-table\";\nimport { docApiPropTypes } from \"../api/defs/doc-generation\";\nimport { Badge } from \"react-bootstrap\";\n\nconst DEFAULT_COLUMNS = [\n    { Header: \"Position Code\", accessor: \"position_code\" },\n    { Header: \"Position Title\", accessor: \"position_title\" },\n    { Header: \"Hours\", accessor: \"est_hours_per_assignment\" },\n    { Header: \"Start\", accessor: \"est_start_date\" },\n    { Header: \"End\", accessor: \"est_end_date\" },\n    {\n        Header: \"Instructors\",\n        accessor: \"instructors\",\n        Cell: props => (\n            <React.Fragment>\n                {props.value.map((instructor = {}) => {\n                    const name = `${instructor.first_name} ${instructor.last_name}`;\n                    return (\n                        <Badge variant=\"secondary\" className=\"mr-1\" key={name}>\n                            {name}\n                        </Badge>\n                    );\n                })}\n            </React.Fragment>\n        )\n    }\n];\n\n/**\n * List the instructors using a ReactTable. `columns` can be passed\n * in to customize columns/cell renderers.\n *\n * @export\n * @param {{instructors: object[], columns: object[]}} props\n * @returns\n */\nexport function PositionsList(props) {\n    const { positions, columns = DEFAULT_COLUMNS } = props;\n    return (\n        <React.Fragment>\n            <h3>Positions</h3>\n            <ReactTable\n                data={positions}\n                columns={columns}\n                showPagination={false}\n                minRows={1}\n            />\n        </React.Fragment>\n    );\n}\nPositionsList.propTypes = {\n    positions: PropTypes.arrayOf(docApiPropTypes.position).isRequired,\n    columns: PropTypes.arrayOf(\n        PropTypes.shape({ Header: PropTypes.any.isRequired })\n    )\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./components.css\";\n\nexport class SearchBox extends React.Component {\n    static propTypes = {\n        data: PropTypes.arrayOf(\n            PropTypes.shape({\n                first_name: PropTypes.string,\n                last_name: PropTypes.string\n            })\n        ).isRequired\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            filters: \"\",\n            data: this.props.data\n        };\n    }\n\n    filter(event) {\n        let input = event.target.value;\n        let newData = this.props.data.filter(x => {\n            for (let key in x) {\n                let v = x[key] && x[key].toString().toLowerCase();\n                if (v && v.indexOf(input.toLowerCase()) !== -1) {\n                    return true;\n                }\n            }\n            return false;\n        });\n        this.setState({\n            filters: input,\n            data: newData\n        });\n    }\n\n    componentWillReceiveProps(nextProps) {\n        //constructor is only invoked when the component is first created. if data change, need to update on componentWillReceiveProps\n        if (nextProps.data !== this.props.data) {\n            this.setState({ data: nextProps.data });\n        }\n    }\n\n    render() {\n        let applicants = this.state.data;\n        let applicantsList = <div>No Applicants...</div>;\n        if (applicants.length > 0) {\n            applicantsList = (\n                <ul>\n                    {applicants.map(applicant => (\n                        <li key={applicant.id}>\n                            {applicant.first_name} {applicant.last_name}\n                        </li>\n                    ))}\n                </ul>\n            );\n        }\n\n        return (\n            <div className=\"search-box\">\n                <input\n                    className=\"search\"\n                    type=\"text\"\n                    name=\"\"\n                    value={this.state.filters}\n                    placeholder=\"Search here\"\n                    onChange={this.filter.bind(this)}\n                />\n                {applicantsList}\n            </div>\n        );\n    }\n}\n","export const readFile = (component, loadDataFunc) => {\n    let files = component.files;\n    if (files.length > 0) {\n        const reader = new FileReader();\n        let importFunc = importChoices(files[0].name, loadDataFunc);\n        reader.readAsText(files[0]);\n        reader.onload = event => importFunc(event.target.result);\n    }\n    component.value = \"\";\n};\n\nexport const downloadFile = async (route, loadMessage) => {\n    try {\n        const res = await fetch(route);\n        if (res.status === 200) {\n            const blob = await res.blob();\n            let filename = getFilename(res);\n            if (window.navigator && window.navigator.msSaveOrOpenBlob) {\n                window.navigator.msSaveOrOpenBlob(blob, filename); //special case for Edge & IE\n            } else {\n                let url = URL.createObjectURL(blob),\n                    a = document.createElement(\"a\");\n                a.href = url;\n                a.download = filename;\n                a.target = \"_self\"; //required in FF\n                a.style.display = \"none\";\n                document.body.appendChild(a); //required in FF\n                a.click();\n                URL.revokeObjectURL(url);\n                document.body.removeChild(a); //required in FF\n            }\n            loadMessage(optSuccess(true, null));\n        } else {\n            const err = await res.json();\n            loadMessage(optSuccess(false, err));\n        }\n    } catch (err) {\n        loadMessage(optSuccess(false, err));\n    }\n};\n\nconst optSuccess = (success, content) => {\n    return {\n        success: success,\n        content: content\n    };\n};\n\nconst getFilename = res => {\n    try {\n        return res.headers\n            .get(\"Content-Disposition\")\n            .match(/filename=\"(.*)\"/)[1];\n    } catch (err) {\n        return \"Untitled\";\n    }\n};\n\nconst importChoices = (file, loadDataFunc) => {\n    switch (getExtension(file)) {\n        case \".json\":\n            return data => {\n                try {\n                    loadDataFunc(optSuccess(true, JSON.parse(data)));\n                } catch (err) {\n                    loadDataFunc(optSuccess(false, err));\n                }\n            };\n        default:\n            return data => {\n                loadDataFunc(optSuccess(true, data));\n            };\n    }\n};\n\nconst getExtension = file => {\n    let extension = file.match(/\\.\\w+$/g);\n    if (extension.length > 0) return extension[0];\n    else return null;\n};\n","import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Button, Dropdown, DropdownButton, Modal } from \"react-bootstrap\";\nimport { readFile } from \"../libs/fileManager\";\n\n/**\n * Renders an dropdown import button component that imports data from file.\n *\n * The data should be in json format.\n *\n * @export\n * @param {function(list[object])} props.uploadFunc\n */\nexport function ImportButton(props) {\n    let { uploadFunc } = props;\n    const [data, setData] = useState(null); // eslint-disable-line\n    const [dialogContents, setDialogContents] = useState(\"\"); // eslint-disable-line\n    const [dialogOpen, setDialogOpen] = useState(false);\n\n    /**\n     * closes the dialog by setting dialogOpen to false\n     */\n    function handleClose() {\n        setDialogOpen(false);\n    }\n\n    /**\n     * Read the json file content and import the data in it to the backend.\n     *\n     * Implementation details discussed in TAPP meeting on Aug 29:\n     *   - assume frontend data is up to date\n     *   - upload the assignment object\n     *   - if there's an part of inconsistency between the imported data and frontend data\n     *   then apiGET that part of data and re-verify it\n     *\n     * @param {event} e\n     */\n    function importFile(e) {\n        let importClicked = data => {\n            // passed in data is of json format\n            console.log(data);\n            throw new Error(\"Not implemented!\");\n\n            /* TODO: \n            * const diffs = getDiffs(data, ...dataFromBackend);\n            * if (diffs) {\n            *     setData(data)\n            *     setDialogContents(diffs);\n            *     setDialogOpen(true);\n            * } else {\n            *     uploadFunc(data)\n            } */\n        };\n\n        readFile(e.target, importClicked);\n    }\n\n    return (\n        <div>\n            <DropdownButton id=\"dropdown-basic-button\" title=\"Import\">\n                <input\n                    id=\"raised-button-file\"\n                    type=\"file\"\n                    accept=\"application/json\"\n                    style={{ display: \"none\" }}\n                    onChange={importFile}\n                />\n                <label htmlFor=\"raised-button-file\">\n                    <Dropdown.Item>Import From File</Dropdown.Item>\n                </label>\n            </DropdownButton>\n\n            <Modal show={dialogOpen} onHide={handleClose}>\n                <Modal.Header closeButton>\n                    <Modal.Title>The following will be overwritten</Modal.Title>\n                </Modal.Header>\n\n                <Modal.Body>\n                    <p>{dialogContents}</p>\n                </Modal.Body>\n\n                <Modal.Footer>\n                    <Button variant=\"secondary\" onClick={handleClose}>\n                        Cancel\n                    </Button>\n                    <Button variant=\"primary\" onClick={() => uploadFunc(data)}>\n                        Proceed\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n        </div>\n    );\n}\n\nImportButton.propTypes = {\n    uploadFunc: PropTypes.func\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport ReactTable from \"react-table\";\nimport selectTableHOC from \"react-table/lib/hoc/selectTable\";\n\nimport \"react-table/react-table.css\";\n// This HOC adds a checkbox to every row of a ReactTable\nconst SelectTable = selectTableHOC(ReactTable);\n\nconst COLUMNS = [\n    { Header: \"Last Name\", accessor: \"applicant.last_name\" },\n    { Header: \"First Name\", accessor: \"applicant.first_name\" },\n    { Header: \"Email\", accessor: \"applicant.email\", width: 250 },\n    {\n        Header: \"Student Number\",\n        accessor: \"applicant.student_number\",\n        width: 100\n    },\n    {\n        Header: \"Position\",\n        accessor: \"position.position_code\",\n        width: 130\n    },\n    {\n        Header: \"Hours\",\n        accessor: \"hours\",\n        width: 100\n    },\n    {\n        Header: \"Contract\",\n        accessor: \"position.position_type\",\n        width: 100\n    },\n    {\n        Header: \"First Time?\",\n        accessor: \"applicant.first_time_ta\",\n        Cell: props => (\n            <div style={{ backgroundColor: \"red\" }}>\n                {(\"\" + props.value).toUpperCase()}\n            </div>\n        ),\n        width: 100\n    }, // boolean\n    { Header: \"Status\", accessor: \"status\", width: 100 },\n    { Header: \"Nag Count\", accessor: \"nag_count\", width: 100 }\n];\n\n/**\n * Converts a row of the offer table into a string for omni-searching\n *\n * @param {*} row\n * @returns {string}\n */\nfunction rowToStr(row) {\n    // flatten to a string two levels deep\n    return Object.values(row)\n        .map(x => (typeof x === \"string\" ? x : Object.values(x).join(\" \")))\n        .join(\" \")\n        .toLowerCase();\n}\n\n/**\n * A filterable offer table. If `selected` and `setSelected` props are provided,\n * rows of this table can be selected.\n *\n * @param {*} props\n * @param {list} props.data - a list of assignments\n * @param {list} props.selected - a list of assignment `id`s that are selected\n * @param {func} props.setSelected - function that is called to set the selected ids\n * @returns\n */\nfunction OfferTable(props) {\n    const { data, selected, setSelected, columns = COLUMNS } = props;\n    // internally we use a more efficient datastructure than a list to keep track of `selected` things.\n    const _selected = new Set(selected);\n    const _setSelected = _selected => {\n        // convert `_selected` back to a list before setting it.\n        setSelected([..._selected]);\n    };\n\n    const [filterString, setFilterString] = React.useState(\"\");\n    const [lastSelected, setLastSelected] = React.useState(null);\n    const [allSelected, setAllSelected] = React.useState(false);\n    function isSelected(id) {\n        return _selected.has(id);\n    }\n\n    const filteredData = filterString\n        ? data.filter(row => rowToStr(row).includes(filterString.toLowerCase()))\n        : data;\n\n    // we need a reference to the internal table so that we can get the \"visible data\"\n    // if it happens to be filtered or sorted\n    let reactTableRef = React.useRef(null);\n    /**\n     * Gets the data that is actually displayed in the ReactTable. This is useful\n     * for range selecting (shift-cliking should select in the range that is displayed)\n     *\n     * @returns {[object]}\n     */\n    function getDisplayedData() {\n        if (!reactTableRef) {\n            // eslint-disable-next-line\n            console.warn(\n                \"Trying to get data displayed in a ReactTable, but no ref has been created\"\n            );\n            return [];\n        }\n        try {\n            return reactTableRef\n                .getWrappedInstance()\n                .getResolvedState()\n                .sortedData.map(x => x._original);\n        } catch (e) {\n            return [];\n        }\n    }\n\n    // Every time `selection` changes, compute whether everything visible\n    // is selected\n    React.useEffect(() => {\n        let allSelected = false;\n        const displayedData = getDisplayedData();\n        if (\n            displayedData.length > 0 &&\n            displayedData.every(row => _selected.has(row.id))\n        ) {\n            allSelected = true;\n        }\n        setAllSelected(allSelected);\n    }, [_selected, filterString]);\n\n    function onToggleRow(ref, shiftOn, row) {\n        // The shift key isn't held. Only select a single item\n        if (!shiftOn) {\n            const newSelectedState = !_selected.has(row.id);\n            const newSelected = new Set(_selected);\n            if (newSelectedState === true) {\n                newSelected.add(row.id);\n                _setSelected(newSelected);\n                setLastSelected(row.id);\n            } else {\n                newSelected.delete(row.id);\n                _setSelected(newSelected);\n                setLastSelected(null);\n            }\n            return;\n        }\n        // The shift key was held, but nothing was \"last clicked\", so we should treat it\n        // as if the shift weren't held\n        if (shiftOn && lastSelected == null) {\n            return onToggleRow(ref, false, row);\n        }\n        // The shift key was held and there was a last selected, so select everything\n        // in the range between the newly clicked row and the last clicked row\n\n        // Get the displayed row data so we don't misselect things.\n        const rowIds = getDisplayedData().map(row => row.id);\n        const lastSelectedIndex = rowIds.indexOf(lastSelected);\n        if (lastSelectedIndex === -1) {\n            // If the \"last selected\" thing is hidden, we should behave like the no-shift case\n            return onToggleRow(ref, false, row);\n        }\n        const selectedIndex = rowIds.indexOf(row.id);\n        const [start, end] = [\n            Math.min(lastSelectedIndex, selectedIndex),\n            Math.max(lastSelectedIndex, selectedIndex)\n        ];\n\n        _setSelected(\n            new Set([\n                ..._selected,\n                ...rowIds.filter((v, i) => i <= end && i >= start)\n            ])\n        );\n    }\n\n    function onToggleAll() {\n        // If everything is selected, set the selected status to `false`\n        // otherwise, set it to true.\n        const rowIds = getDisplayedData().map(row => row.id);\n        if (allSelected) {\n            const newSelected = new Set(_selected);\n            for (const id of rowIds) {\n                newSelected.delete(id);\n            }\n            _setSelected(newSelected);\n        } else {\n            _setSelected(new Set([..._selected, ...rowIds]));\n        }\n    }\n\n    let tableComponent = (\n        <SelectTable\n            ref={r => (reactTableRef = r)}\n            data={filteredData}\n            columns={columns}\n            toggleSelection={onToggleRow}\n            selectAll={allSelected}\n            toggleAll={onToggleAll}\n            isSelected={isSelected}\n            selectType=\"checkbox\"\n            keyField=\"id\"\n            minRows={1}\n            showPagination={false}\n        />\n    );\n    // if `selected` was not passed in, the table rows should not be selectable\n    if (selected == null) {\n        tableComponent = <ReactTable columns={columns} data={filteredData} />;\n    }\n    return (\n        <div>\n            Filter:{\" \"}\n            <input\n                type=\"text\"\n                onChange={e => setFilterString(e.target.value)}\n            />\n            {tableComponent}\n        </div>\n    );\n}\nOfferTable.propTypes = {\n    selected: PropTypes.array,\n    setSelected: PropTypes.func,\n    data: PropTypes.array.isRequired,\n    columns: PropTypes.arrayOf(\n        PropTypes.shape({\n            Header: PropTypes.string,\n            accessor: PropTypes.oneOfType([PropTypes.string, PropTypes.func])\n        })\n    )\n};\n\nexport { OfferTable };\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport {\n    assignmentsSelector,\n    upsertApplicant,\n    upsertAssignment\n} from \"../../api/actions\";\nimport { OfferTable } from \"../../components/offer-table\";\nimport { EditableField } from \"../../components/edit-field-widgets\";\nimport { offerTableSelector, setSelectedRows } from \"./actions\";\n\n/**\n * A cell that renders editable applicant information\n *\n * @param {*} props\n * @returns\n */\nfunction ApplicantCell(props) {\n    const title = `Edit ${props.column.Header}`;\n    const { upsertApplicant, field } = props;\n    function onChange(newVal) {\n        const applicantId = props.original.applicant.id;\n        upsertApplicant({ id: applicantId, [field]: newVal });\n    }\n    return (\n        <EditableField\n            title={title}\n            value={props.value || \"\"}\n            onChange={onChange}\n        >\n            {props.value}\n        </EditableField>\n    );\n}\n\n/**\n * A cell that renders editable assignment information\n *\n * @param {*} props\n * @returns\n */\nfunction AssignmentCell(props) {\n    const title = `Edit ${props.column.Header}`;\n    const { upsertAssignment, field } = props;\n    function onChange(newVal) {\n        const applicationId = props.original.id;\n        upsertAssignment({ id: applicationId, [field]: newVal });\n    }\n    return (\n        <EditableField\n            title={title}\n            value={props.value || \"\"}\n            onChange={onChange}\n        >\n            {props.value}\n        </EditableField>\n    );\n}\n\nfunction EditableOfferTable(props) {\n    const { upsertApplicant, upsertAssignment, ...rest } = props;\n\n    // Bind an `ApplicantCell` to a particular field\n    function generateApplicantCell(field) {\n        return props => (\n            <ApplicantCell\n                field={field}\n                upsertApplicant={upsertApplicant}\n                {...props}\n            />\n        );\n    }\n\n    // Bind an `AssignmentCell` to a particular field\n    function generateAssignmentCell(field) {\n        return props => (\n            <AssignmentCell\n                field={field}\n                upsertAssignment={upsertAssignment}\n                {...props}\n            />\n        );\n    }\n\n    const columns = [\n        {\n            Header: \"Last Name\",\n            accessor: \"applicant.last_name\",\n            Cell: generateApplicantCell(\"last_name\")\n        },\n        {\n            Header: \"First Name\",\n            accessor: \"applicant.first_name\",\n            Cell: generateApplicantCell(\"first_name\")\n        },\n        {\n            Header: \"Email\",\n            accessor: \"applicant.email\",\n            Cell: generateApplicantCell(\"email\")\n        },\n        {\n            Header: \"Position\",\n            accessor: \"position.position_code\"\n        },\n        {\n            Header: \"Hours\",\n            accessor: \"hours\",\n            Cell: generateAssignmentCell(\"hours\")\n        }\n    ];\n\n    return <OfferTable columns={columns} {...rest} />;\n}\n\n/**\n * OfferTable that has been connected to the redux store\n * for live updates and editability.\n */\nexport const ConnectedOfferTable = connect(\n    state => ({\n        data: assignmentsSelector(state),\n        selected: offerTableSelector(state).selectedAssignmentIds\n    }),\n    { upsertApplicant, upsertAssignment, setSelected: setSelectedRows }\n)(EditableOfferTable);\n","export const SET_SELECTED_ROWS = \"SET_SELECTED_ROWS\";\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Form } from \"react-bootstrap\";\nimport { Typeahead } from \"react-bootstrap-typeahead\";\n\nimport \"react-bootstrap-typeahead/css/Typeahead.css\";\nimport \"react-bootstrap-typeahead/css/Typeahead-bs4.css\";\nimport { docApiPropTypes } from \"../../api/defs/doc-generation\";\nimport { fieldEditorFactory, DialogRow } from \"./common-controls\";\n\nconst DEFAULT_POSITION = {\n    position_code: \"\",\n    position_title: \"\",\n    est_hours_per_assignment: 0,\n    position_type: \"standard\",\n    duties:\n        \"Some combination of marking, invigilating, tutorials, office hours, and the help centre.\",\n    instructors: []\n};\n\n/**\n * Edit information about a position\n *\n * @export\n * @param {{position: object, instructors: object[]}} props\n * @returns\n */\nexport function PositionEditor(props) {\n    const { position: positionProp, setPosition, instructors = [] } = props;\n    const position = { ...DEFAULT_POSITION, ...positionProp };\n\n    /**\n     * Set `position.instructors` to the specified list.\n     *\n     * @param {*} instructors\n     */\n    function setInstructors(instructors) {\n        setPosition({ ...position, instructors });\n    }\n\n    const createFieldEditor = fieldEditorFactory(position, setPosition);\n\n    return (\n        <Form>\n            <DialogRow>\n                {createFieldEditor(\n                    \"Course Code (e.g. MAT135H1F)\",\n                    \"position_code\"\n                )}\n                {createFieldEditor(\"Course Title\", \"position_title\")}\n            </DialogRow>\n            <DialogRow>\n                {createFieldEditor(\"Start Date\", \"est_start_date\", \"date\")}\n                {createFieldEditor(\"End Date\", \"est_end_date\", \"date\")}\n                {createFieldEditor(\n                    \"Hours per Assignment\",\n                    \"est_hours_per_assignment\",\n                    \"number\"\n                )}\n            </DialogRow>\n            <Form.Group>\n                <Form.Label>Instructors</Form.Label>\n                <Typeahead\n                    id=\"instructors-input\"\n                    ignoreDiacritics={true}\n                    multiple\n                    placeholder=\"Instructors...\"\n                    labelKey={option =>\n                        `${option.first_name} ${option.last_name}`\n                    }\n                    selected={position.instructors}\n                    options={instructors}\n                    onChange={setInstructors}\n                />\n            </Form.Group>\n\n            <h3>Ad-related Info</h3>\n            <DialogRow>{createFieldEditor(\"Duties\", \"duties\")}</DialogRow>\n            <DialogRow>\n                {createFieldEditor(\"Qualifications\", \"qualifications\")}\n            </DialogRow>\n\n            <h3>Admin Info</h3>\n            <DialogRow>\n                {createFieldEditor(\n                    \"Current Enrollment\",\n                    \"current_enrollment\",\n                    \"number\"\n                )}\n                {createFieldEditor(\n                    \"Waitlisted\",\n                    \"current_waitlisted\",\n                    \"number\"\n                )}\n                {createFieldEditor(\n                    \"Desired Number of Assignments\",\n                    \"desired_num_assignments\",\n                    \"number\"\n                )}\n            </DialogRow>\n        </Form>\n    );\n}\nPositionEditor.propTypes = {\n    position: docApiPropTypes.position.isRequired,\n    setPosition: PropTypes.func.isRequired,\n    instructors: PropTypes.arrayOf(docApiPropTypes.instructor)\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Form } from \"react-bootstrap\";\nimport { Typeahead } from \"react-bootstrap-typeahead\";\n\nimport \"react-bootstrap-typeahead/css/Typeahead.css\";\nimport \"react-bootstrap-typeahead/css/Typeahead-bs4.css\";\nimport { docApiPropTypes } from \"../../api/defs/doc-generation\";\nimport { fieldEditorFactory, DialogRow } from \"./common-controls\";\n\nconst DEFAULT_ASSIGNMENT = {\n    note: \"\",\n    position: { id: null },\n    position_id: null,\n    applicant: { id: null },\n    applicant_id: null\n};\n\n/**\n * Edit information about a position\n *\n * @export\n * @param {{position: object, instructors: object[]}} props\n * @returns\n */\nexport function AssignmentEditor(props) {\n    const {\n        assignment: assignmentProp,\n        setAssignment,\n        applicants,\n        positions\n    } = props;\n    const assignment = { ...DEFAULT_ASSIGNMENT, ...assignmentProp };\n\n    // update the selected position; this comes with side effects\n    function setPosition(positions) {\n        const position = positions[positions.length - 1] || { id: null };\n        setAssignment({\n            ...assignment,\n            position,\n            position_id: position.id,\n            hours: position.est_hours_per_assignment,\n            contract_start: position.est_start_date,\n            contract_end: position.est_end_date\n        });\n    }\n\n    // update the selected applicant\n    function setApplicant(applicants) {\n        const applicant = applicants[applicants.length - 1] || { id: null };\n        setAssignment({\n            ...assignment,\n            applicant,\n            applicant_id: applicant.id\n        });\n    }\n\n    const createFieldEditor = fieldEditorFactory(assignment, setAssignment);\n\n    return (\n        <Form>\n            <DialogRow>\n                <React.Fragment>\n                    <Form.Label>Position</Form.Label>\n                    <Typeahead\n                        id=\"position-input\"\n                        ignoreDiacritics={true}\n                        placeholder=\"Position...\"\n                        multiple\n                        labelKey={option =>\n                            `${option.position_code} (${option.position_title})`\n                        }\n                        selected={\n                            assignment.position.id == null\n                                ? []\n                                : [assignment.position]\n                        }\n                        options={positions}\n                        onChange={setPosition}\n                    />\n                </React.Fragment>\n                <React.Fragment>\n                    <Form.Label>Applicant</Form.Label>\n                    <Typeahead\n                        id=\"applicant-input\"\n                        ignoreDiacritics={true}\n                        placeholder=\"Applicant...\"\n                        multiple\n                        labelKey={option =>\n                            `${option.first_name} ${option.last_name}`\n                        }\n                        selected={\n                            assignment.applicant.id == null\n                                ? []\n                                : [assignment.applicant]\n                        }\n                        options={applicants}\n                        onChange={setApplicant}\n                    />\n                </React.Fragment>\n            </DialogRow>\n            <DialogRow>\n                {createFieldEditor(\"Hours\", \"hours\", \"number\")}\n            </DialogRow>\n\n            <h4>Optional Settings</h4>\n            <DialogRow>\n                {createFieldEditor(\"Start Date\", \"contract_start\", \"date\")}\n                {createFieldEditor(\"End Date\", \"contract_end\", \"date\")}\n            </DialogRow>\n        </Form>\n    );\n}\nAssignmentEditor.propTypes = {\n    assignment: docApiPropTypes.assignment.isRequired,\n    setAssignment: PropTypes.func.isRequired,\n    positions: PropTypes.arrayOf(docApiPropTypes.position),\n    applicants: PropTypes.arrayOf(docApiPropTypes.applicant)\n};\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport {\n    fetchSessions,\n    setActiveSession,\n    sessionsSelector,\n    activeSessionSelector,\n    applicantsSelector,\n    positionTemplatesSelector,\n    instructorsSelector,\n    positionsSelector,\n    assignmentsSelector\n} from \"../../api/actions\";\nimport { offerTableSelector } from \"../offertable/actions\";\nimport { SessionSelect } from \"../../components/sessions\";\nimport { SessionEditor } from \"../../components/forms/session-editor\";\nimport { ApplicantsList } from \"../../components/applicants-list\";\nimport { PositionTemplatesList } from \"../../components/postition-templates-list\";\nimport { ConnectedInstructorsList } from \"../instructors\";\nimport { PositionsList } from \"../../components/positions-list\";\nimport { AssignmentsList } from \"../../components/assignments-list\";\nimport { SearchBox } from \"../../components/search-box\";\nimport { EmailButton } from \"../../components/email-button\";\nimport { ImportButton } from \"../../components/import-button\";\nimport { EditableField } from \"../../components/edit-field-widgets\";\nimport { ConnectedOfferTable } from \"../offertable\";\nimport { PositionEditor } from \"../../components/forms/position-editor\";\nimport { InstructorEditor } from \"../../components/instructors\";\nimport { AssignmentEditor } from \"../../components/forms/assignment-editor\";\n\n// Connect the SessionSelect component\nlet mapStateToProps = state => {\n    return {\n        sessions: sessionsSelector(state),\n        activeSession: activeSessionSelector(state)\n    };\n};\nlet mapDispatchToProps = { fetchSessions, setActiveSession };\nconst ConnectedSessionSelect = connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(SessionSelect);\n\nconst ConnectedApplicantList = connect(state => ({\n    applicants: applicantsSelector(state)\n}))(ApplicantsList);\n\nconst ConnectedPositionTemplateList = connect(state => ({\n    position_templates: positionTemplatesSelector(state)\n}))(PositionTemplatesList);\n\nconst ConnectedPositionsList = connect(state => ({\n    positions: positionsSelector(state)\n}))(PositionsList);\n\nconst ConnectedAssignmentsList = connect(state => ({\n    assignments: assignmentsSelector(state)\n}))(AssignmentsList);\n\nconst ConnectedSearchBox = connect(state => ({\n    data: applicantsSelector(state)\n}))(SearchBox);\n\nconst ConnectedEmailButton = connect(state => ({\n    data: offerTableSelector(state).selectedAssignmentIds\n}))(EmailButton);\n\nconst ConnectedPositionEditor = connect(state => ({\n    instructors: instructorsSelector(state)\n}))(PositionEditor);\n\nconst ConnectedAssignmentEditor = connect(state => ({\n    positions: positionsSelector(state),\n    applicants: applicantsSelector(state)\n}))(AssignmentEditor);\n\n/**\n * Encapsulate a react component in a frame.\n *\n * @param {object} props\n * @param {string} props.title The name of the component encapsulated\n */\nfunction DashboardWidget(props) {\n    const { children, title } = props;\n    return (\n        <div style={{ margin: 5 }}>\n            <h5>\n                The{\" \"}\n                <span style={{ color: \"green\", fontFamily: \"mono\" }}>\n                    {title}\n                </span>{\" \"}\n                Component\n            </h5>\n            <div style={{ border: \"1px solid black\", padding: 5 }}>\n                {children}\n            </div>\n        </div>\n    );\n}\n\n/**\n * A dashboard containing a sample of all the widgets connected\n * appropriately to the redux store.\n *\n */\nfunction Dashboard() {\n    const [assignment, setAssignment] = React.useState({\n        position_id: 0,\n        applicant_id: 0\n    });\n    const [position, setPosition] = React.useState({ position_code: \"\" });\n    const [instructor, setInstructor] = React.useState({\n        last_name: \"Baggins\",\n        first_name: \"Bilbo\",\n        utorid: \"bilbob\"\n    });\n    const [session, setSession] = React.useState({ name: \"\" });\n    return (\n        <div>\n            <DashboardWidget title=\"AssignmentsEditor\">\n                <ConnectedAssignmentEditor\n                    assignment={assignment}\n                    setAssignment={setAssignment}\n                />\n            </DashboardWidget>\n            <DashboardWidget title=\"SessionEditor\">\n                <SessionEditor session={session} setSession={setSession} />\n            </DashboardWidget>\n            <DashboardWidget title=\"InstructorEditor\">\n                <InstructorEditor\n                    instructor={instructor}\n                    setInstructor={setInstructor}\n                />\n            </DashboardWidget>\n            <DashboardWidget title=\"PositionEditor\">\n                <ConnectedPositionEditor\n                    position={position}\n                    setPosition={setPosition}\n                />\n            </DashboardWidget>\n            <DashboardWidget title=\"EditableField\">\n                <EditableField\n                    title=\"Edit this super awesome content\"\n                    value={45}\n                    onChange={console.log}\n                >\n                    Edit me!\n                </EditableField>\n            </DashboardWidget>\n            <DashboardWidget title=\"SessionSelect\">\n                <ConnectedSessionSelect />\n            </DashboardWidget>\n            <DashboardWidget title=\"ApplicantsList\">\n                <ConnectedApplicantList />\n            </DashboardWidget>\n            <DashboardWidget title=\"PostitionTemplatesList\">\n                <ConnectedPositionTemplateList />\n            </DashboardWidget>\n            <DashboardWidget title=\"InstuctorsList\">\n                <ConnectedInstructorsList />\n            </DashboardWidget>\n            <DashboardWidget title=\"PositionsList\">\n                <ConnectedPositionsList />\n            </DashboardWidget>\n            <DashboardWidget title=\"AssignmentsList\">\n                <ConnectedAssignmentsList />\n            </DashboardWidget>\n            <DashboardWidget title=\"SearchBox\">\n                <ConnectedSearchBox />\n            </DashboardWidget>\n            <DashboardWidget title=\"ImportButton\">\n                <ImportButton />\n            </DashboardWidget>\n            <DashboardWidget title=\"EmailButton\">\n                <ConnectedEmailButton />\n            </DashboardWidget>\n            <DashboardWidget title=\"OfferTable\">\n                <ConnectedOfferTable />\n            </DashboardWidget>\n        </div>\n    );\n}\n\nexport default Dashboard;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nfunction AssignmentsList(props) {\n    const { assignments } = props;\n    let assignmentsList = <div>No assignments...</div>;\n    if (assignments.length > 0) {\n        assignmentsList = (\n            <ul>\n                {assignments.map(assignment => (\n                    <li key={assignment.id}>\n                        {assignment.position.position_code} ({assignment.hours}{\" \"}\n                        hours): {assignment.applicant.first_name}{\" \"}\n                        {assignment.applicant.last_name}\n                    </li>\n                ))}\n            </ul>\n        );\n    }\n    return (\n        <div>\n            <h3>Available Assignments</h3>\n            {assignmentsList}\n        </div>\n    );\n}\nAssignmentsList.propTypes = {\n    assignments: PropTypes.arrayOf(\n        PropTypes.shape({\n            id: PropTypes.number,\n            position: PropTypes.object,\n            applicant: PropTypes.object\n        })\n    ).isRequired\n};\n\nexport { AssignmentsList };\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Dropdown, DropdownButton } from \"react-bootstrap\";\n\n/**\n * Renders an dropdown email button\n *\n * The data is a list of ids to be emailed by the backend.\n *\n * @export\n * @param {list[object]} props.data\n */\nexport function EmailButton(props) {\n    let { data } = props;\n\n    /**\n     * Email to the applicants (using ids) by invoking email service provided by the backend\n     */\n    function emailHandler() {\n        console.log(\"data read from redux: \" + data);\n        throw new Error(\"Email function not implemented!\");\n    }\n\n    /**\n     * Email contract to the applicants (using ids) by invoking email service provided by the backend\n     */\n    function emailContract() {\n        throw new Error(\"Email contract not implemented!\");\n    }\n\n    /**\n     * Nag offers to the applicants (using ids) by invoking email service provided by the backend\n     */\n    function nagOffers() {\n        throw new Error(\"Nag offer function not implemented!\");\n    }\n\n    return (\n        <DropdownButton id=\"dropdown-basic-button\" title=\"Email\">\n            <Dropdown.Item onClick={() => emailHandler()}>\n                Email Blank\n            </Dropdown.Item>\n            <Dropdown.Item onClick={() => emailContract()}>\n                Email Contract\n            </Dropdown.Item>\n            <Dropdown.Item onClick={() => nagOffers()}>\n                Nag Offers\n            </Dropdown.Item>\n        </DropdownButton>\n    );\n}\n\nEmailButton.propTypes = {\n    data: PropTypes.arrayOf(PropTypes.any)\n};\n","import { connect } from \"react-redux\";\n\nimport {\n    fetchSessions,\n    setActiveSession,\n    sessionsSelector,\n    activeSessionSelector\n} from \"../../api/actions\";\nimport { SessionSelect } from \"../../components/sessions\";\n\nlet mapStateToProps = state => {\n    return {\n        sessions: sessionsSelector(state),\n        activeSession: activeSessionSelector(state)\n    };\n};\n\nlet mapDispatchToProps = { fetchSessions, setActiveSession };\n\nexport const ConnectedSessionSelect = connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(SessionSelect);\n","import React from \"react\";\nimport { strip } from \"../../libs/utils\";\nimport { connect } from \"react-redux\";\nimport { SessionEditor } from \"../../components/forms/session-editor\";\nimport { upsertSession, sessionsSelector } from \"../../api/actions\";\nimport { Modal, Button, Alert } from \"react-bootstrap\";\n\nfunction getConficts(session, sessions = []) {\n    const ret = { delayShow: \"\", immediateShow: \"\" };\n    if (\n        !strip(session.name) ||\n        !strip(session.start_date) ||\n        !strip(session.end_date)\n    ) {\n        ret.delayShow = \"A first name, start date, and end date is required\";\n    }\n    const matchingSession = sessions.find(\n        x => strip(x.name) === strip(session.name)\n    );\n    if (matchingSession) {\n        ret.immediateShow = (\n            <p>Another session exists with name={session.name}</p>\n        );\n    }\n    return ret;\n}\n\nconst BLANK_SESSION = {\n    name: \"\",\n    start_date: \"\",\n    end_date: \"\",\n    rate1: \"\",\n    rate2: \"\"\n};\n\nexport function AddSessionDialog(props) {\n    const { show, onHide = () => {}, sessions, upsertSession } = props;\n    const [newSession, setNewSession] = React.useState(BLANK_SESSION);\n\n    React.useEffect(() => {\n        if (!show) {\n            // If the dialog is hidden, reset the state\n            setNewSession(BLANK_SESSION);\n        }\n    }, [show]);\n\n    function createInstructor() {\n        upsertSession(newSession);\n        onHide();\n    }\n\n    const conflicts = getConficts(newSession, sessions);\n\n    return (\n        <Modal show={show} onHide={onHide}>\n            <Modal.Header closeButton>\n                <Modal.Title>Add Session</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <SessionEditor\n                    session={newSession}\n                    setSession={setNewSession}\n                />\n                {conflicts.immediateShow ? (\n                    <Alert variant=\"danger\">{conflicts.immediateShow}</Alert>\n                ) : null}\n            </Modal.Body>\n            <Modal.Footer>\n                <Button onClick={onHide} variant=\"light\">\n                    Cancel\n                </Button>\n                <Button\n                    onClick={createInstructor}\n                    title={conflicts.delayShow || \"Create Session\"}\n                    disabled={\n                        !!conflicts.delayShow || !!conflicts.immediateShow\n                    }\n                >\n                    Create Session\n                </Button>\n            </Modal.Footer>\n        </Modal>\n    );\n}\n\nexport const ConnectedAddSessionDialog = connect(\n    state => ({ sessions: sessionsSelector(state) }),\n    { upsertSession }\n)(AddSessionDialog);\n","import React from \"react\";\nimport { ConnectedSessionSelect } from \"./session-select\";\nimport { ConnectedAddSessionDialog } from \"./add-session-dialog\";\nimport { Button } from \"react-bootstrap\";\n\nexport function AdminSessionsView() {\n    const [addDialogVisible, setAddDialogVisible] = React.useState(false);\n    return (\n        <div>\n            <Button\n                onClick={() => {\n                    setAddDialogVisible(true);\n                }}\n            >\n                Add Session\n            </Button>\n            <ConnectedAddSessionDialog\n                show={addDialogVisible}\n                onHide={() => {\n                    setAddDialogVisible(false);\n                }}\n            />\n            <ConnectedSessionSelect />\n        </div>\n    );\n}\n\nexport { ConnectedAddSessionDialog, ConnectedSessionSelect };\n","import React from \"react\";\nimport { PositionsList } from \"../../components/positions-list\";\nimport { FilteredList } from \"../../components/filtered-list\";\nimport { connect } from \"react-redux\";\nimport { positionsSelector } from \"../../api/actions\";\nimport { ConnectedSessionSelect } from \"../sessions\";\n\nconst ConnectedFilteredList = connect((state, ownProps) => ({\n    positions: positionsSelector(state),\n    listRenderer: ownProps.listRenderer\n}))(FilteredList);\n\nfunction ControlPanel() {\n    // dummy filter function\n    const filter = (data, query) => {\n        if (!query) {\n            return data;\n        }\n        return data;\n    };\n\n    return (\n        <div>\n            <ConnectedSessionSelect />\n            <ConnectedFilteredList\n                listRenderer={PositionsList}\n                filterFunc={filter}\n            />\n        </div>\n    );\n}\n\nexport default ControlPanel;\n","import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\n\n/**\n * Renders a component that filters and renders a list of objects.\n *\n * The data is filtered based on the filter prop function, which takes\n * as input the data and the query from the search box.\n *\n * The filtered data is rendered using the listRenderer prop.\n *\n * @export\n * @param {list[object]} props.data\n * @param {component} props.listRenderer\n * @param {function(list[object], string): list[object]} props.filterFunc\n */\nexport function FilteredList(props) {\n    const { data, listRenderer, filterFunc, ...rest } = props;\n    const Renderer = listRenderer;\n    const [query, setQuery] = useState(\"\");\n\n    let filteredData = filterFunc(data, query);\n\n    return (\n        <div>\n            <input\n                type=\"text\"\n                value={query}\n                onChange={e => setQuery(e.target.value)}\n            />\n            <Renderer data={filteredData} {...rest} />\n        </div>\n    );\n}\n\nFilteredList.propTypes = {\n    data: PropTypes.arrayOf(PropTypes.any),\n    listRenderer: PropTypes.elementType,\n    filterFunc: PropTypes.func\n};\n","import React from \"react\";\nimport { strip } from \"../../libs/utils\";\nimport { connect } from \"react-redux\";\nimport {\n    upsertPosition,\n    positionsSelector,\n    instructorsSelector\n} from \"../../api/actions\";\nimport { Modal, Button, Alert } from \"react-bootstrap\";\nimport { PositionEditor } from \"../../components/forms/position-editor\";\n\nfunction getConficts(position, positions = []) {\n    const ret = { delayShow: \"\", immediateShow: \"\" };\n    if (\n        !strip(position.position_code) ||\n        !strip(position.est_start_date) ||\n        !strip(position.est_end_date)\n    ) {\n        ret.delayShow = \"A position code, start date, and end date is required\";\n    }\n    const matchingSession = positions.find(\n        x => strip(x.position_code) === strip(position.position_code)\n    );\n    if (matchingSession) {\n        ret.immediateShow = (\n            <p>Another position exists with name={position.position_code}</p>\n        );\n    }\n    return ret;\n}\n\nconst BLANK_POSITION = {\n    position_code: \"\",\n    position_title: \"\",\n    est_hours_per_assignment: 0,\n    position_type: \"standard\",\n    duties:\n        \"Some combination of marking, invigilating, tutorials, office hours, and the help centre.\",\n    instructors: []\n};\n\nexport function AddPositionDialog(props) {\n    const {\n        show,\n        onHide = () => {},\n        positions,\n        upsertPosition,\n        instructors\n    } = props;\n    const [newPosition, setNewPosition] = React.useState(BLANK_POSITION);\n\n    React.useEffect(() => {\n        if (!show) {\n            // If the dialog is hidden, reset the state\n            setNewPosition(BLANK_POSITION);\n        }\n    }, [show]);\n\n    function createInstructor() {\n        upsertPosition(newPosition);\n        onHide();\n    }\n\n    const conflicts = getConficts(newPosition, positions);\n\n    return (\n        <Modal show={show} onHide={onHide}>\n            <Modal.Header closeButton>\n                <Modal.Title>Add Position</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <PositionEditor\n                    position={newPosition}\n                    setPosition={setNewPosition}\n                    instructors={instructors}\n                />\n                {conflicts.immediateShow ? (\n                    <Alert variant=\"danger\">{conflicts.immediateShow}</Alert>\n                ) : null}\n            </Modal.Body>\n            <Modal.Footer>\n                <Button onClick={onHide} variant=\"light\">\n                    Cancel\n                </Button>\n                <Button\n                    onClick={createInstructor}\n                    title={conflicts.delayShow || \"Create Position\"}\n                    disabled={\n                        !!conflicts.delayShow || !!conflicts.immediateShow\n                    }\n                >\n                    Create Position\n                </Button>\n            </Modal.Footer>\n        </Modal>\n    );\n}\n\nexport const ConnectedAddPositionDialog = connect(\n    state => ({\n        positions: positionsSelector(state),\n        instructors: instructorsSelector(state)\n    }),\n    { upsertPosition }\n)(AddPositionDialog);\n","import { connect } from \"react-redux\";\nimport { positionsSelector } from \"../../api/actions\";\nimport { PositionsList } from \"../../components/positions-list\";\n\nexport const ConnectedPositionsList = connect(state => ({\n    positions: positionsSelector(state)\n}))(PositionsList);\n","import React from \"react\";\nimport { ConnectedAddPositionDialog } from \"./add-position-dialog\";\nimport { Button } from \"react-bootstrap\";\nimport { ConnectedSessionSelect } from \"../sessions\";\nimport { ConnectedPositionsList } from \"./position-list\";\n\nexport function AdminPositionsView() {\n    const [addDialogVisible, setAddDialogVisible] = React.useState(false);\n    return (\n        <div>\n            <ConnectedSessionSelect />\n            <Button\n                onClick={() => {\n                    setAddDialogVisible(true);\n                }}\n            >\n                Add Position\n            </Button>\n            <ConnectedAddPositionDialog\n                show={addDialogVisible}\n                onHide={() => {\n                    setAddDialogVisible(false);\n                }}\n            />\n            <ConnectedPositionsList />\n        </div>\n    );\n}\n\nexport { ConnectedAddPositionDialog, ConnectedPositionsList };\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Modal, Alert, Button } from \"react-bootstrap\";\nimport { strip } from \"../../libs/utils\";\nimport {\n    positionsSelector,\n    applicantsSelector,\n    assignmentsSelector,\n    upsertAssignment\n} from \"../../api/actions\";\nimport { AssignmentEditor } from \"../../components/forms/assignment-editor\";\n\nfunction getConficts(assignment, assignments = []) {\n    const ret = { delayShow: \"\", immediateShow: \"\" };\n    if (!strip(assignment.position_id) || !strip(assignment.applicant_id)) {\n        ret.delayShow = \"A position and applicant is required\";\n    }\n    const matchingAssignment = assignments.find(\n        x =>\n            strip((x.position || {}).id) ===\n                strip((assignment.position || {}).id) &&\n            strip((x.applicant || {}).id) ===\n                strip((assignment.applicant || {}).id)\n    );\n    if (matchingAssignment) {\n        ret.immediateShow = (\n            <p>\n                Another assignment exists with{\" \"}\n                <b>\n                    applicant={assignment.applicant.first_name}{\" \"}\n                    {assignment.applicant.last_name}\n                </b>{\" \"}\n                and <b>position={assignment.position.position_code}</b>\n            </p>\n        );\n    }\n    return ret;\n}\n\nconst BLANK_ASSIGNMENT = {\n    position: { id: null },\n    applicant: { id: null },\n    position_id: -1,\n    applicant_id: -1\n};\n\nexport function AddAssignmentDialog(props) {\n    const {\n        show,\n        onHide,\n        positions,\n        applicants,\n        assignments,\n        upsertAssignment\n    } = props;\n    const [newAssignment, setNewAssignment] = React.useState(BLANK_ASSIGNMENT);\n\n    React.useEffect(() => {\n        if (!show) {\n            // If the dialog is hidden, reset the state\n            setNewAssignment(BLANK_ASSIGNMENT);\n        }\n    }, [show]);\n\n    function createAssignment() {\n        upsertAssignment(newAssignment);\n        onHide();\n    }\n\n    const conflicts = getConficts(newAssignment, assignments);\n\n    return (\n        <Modal show={show} onHide={onHide}>\n            <Modal.Header closeButton>\n                <Modal.Title>Add Assignment</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <AssignmentEditor\n                    positions={positions}\n                    applicants={applicants}\n                    assignment={newAssignment}\n                    setAssignment={setNewAssignment}\n                />\n                {conflicts.immediateShow ? (\n                    <Alert variant=\"danger\">{conflicts.immediateShow}</Alert>\n                ) : null}\n            </Modal.Body>\n            <Modal.Footer>\n                <Button onClick={onHide} variant=\"light\">\n                    Cancel\n                </Button>\n                <Button\n                    onClick={createAssignment}\n                    title={conflicts.delayShow || \"Create Position\"}\n                    disabled={\n                        !!conflicts.delayShow || !!conflicts.immediateShow\n                    }\n                >\n                    Create Assignment\n                </Button>\n            </Modal.Footer>\n        </Modal>\n    );\n}\n\nexport const ConnectedAddAssignmentDialog = connect(\n    state => ({\n        positions: positionsSelector(state),\n        applicants: applicantsSelector(state),\n        assignments: assignmentsSelector(state)\n    }),\n    { upsertAssignment }\n)(AddAssignmentDialog);\n","import React from \"react\";\nimport { ConnectedOfferTable } from \"../offertable\";\nimport { Button } from \"react-bootstrap\";\nimport { ConnectedAddAssignmentDialog } from \"./add-assignment-dialog\";\n\nexport function AdminAssignmentsView() {\n    const [addDialogVisible, setAddDialogVisible] = React.useState(false);\n    return (\n        <div>\n            <Button\n                onClick={() => {\n                    setAddDialogVisible(true);\n                }}\n            >\n                Add Assignment\n            </Button>\n            <ConnectedOfferTable />\n            <ConnectedAddAssignmentDialog\n                show={addDialogVisible}\n                onHide={setAddDialogVisible}\n            />\n        </div>\n    );\n}\n","import React from \"react\";\nimport { Redirect, Route, Switch } from \"react-router-dom\";\nimport Dashboard from \"../dashboard\";\nimport ControlPanel from \"../cp_control_panel/ControlPanel\";\nimport { AdminIstructorsView } from \"../instructors\";\nimport { AdminSessionsView } from \"../sessions\";\nimport { AdminPositionsView } from \"../positions\";\nimport { AdminAssignmentsView } from \"../assignments\";\n\nexport function AdminRoutes() {\n    return (\n        <Switch>\n            <Route exact path=\"/\">\n                <Redirect to=\"/tapp\" />\n            </Route>\n            <Route path=\"/tapp/sessions\">\n                <AdminSessionsView />\n            </Route>\n            <Route path=\"/tapp/instructors\">\n                <AdminIstructorsView />\n            </Route>\n            <Route exact path=\"/tapp/positions\">\n                <AdminPositionsView />\n            </Route>\n            <Route exact path=\"/tapp/assignments\">\n                <AdminAssignmentsView />\n            </Route>\n            <Route exact path=\"/dashboard\">\n                <Dashboard />\n            </Route>\n            <Route exact path=\"/cp\">\n                <ControlPanel />\n            </Route>\n        </Switch>\n    );\n}\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Nav, Navbar, NavDropdown } from \"react-bootstrap\";\nimport { Route, NavLink } from \"react-router-dom\";\n\n/**\n * Wrap `\"react-router-dom\"`'s `NavLink` in Bootstrap\n * styling.\n *\n * @param {*} props\n * @returns\n */\nexport function BootstrapNavLink(props) {\n    return (\n        <Nav.Link as={NavLink} activeClassName=\"text-dark\" {...props}>\n            {props.children}\n        </Nav.Link>\n    );\n}\nBootstrapNavLink.propTypes = {\n    to: PropTypes.string\n};\n\n/**\n * Render a header that dynamically adjusts depending on the route\n * (as determined by `react-router-dom`). Top-level routes appear in\n * a dropdown menu. Subroutes (which only show when the top-level route is active)\n * appear as a horizontal list. A toplevel route takes the form\n *\n * ```\n * {\n *    route: \"/some/route\"\n *    name: \"Display Name\"\n *    description: \"Alt Text\"\n *    subroutes: [<same as routes>]\n * }\n * ```\n *\n * `subroutes.route` is automatically prefixed with the parent's `route`.\n *\n * @export\n * @param {object[]} props.routes\n * @returns\n */\nexport function Header(props) {\n    const { routes = [] } = props;\n\n    if (routes.length === 0) {\n        return <div>No Routes in Header</div>;\n    }\n\n    return (\n        <Navbar bg=\"light\" variant=\"light\">\n            <Navbar.Brand>\n                <NavDropdown\n                    title={routes.map(route => (\n                        <Route path={route.route} key={route.route}>\n                            {route.name}\n                        </Route>\n                    ))}\n                >\n                    {routes\n                        .filter(route => !route.hidden)\n                        .map(route => (\n                            <NavDropdown.Item\n                                key={route.route}\n                                as=\"span\"\n                                tabIndex=\"0\"\n                            >\n                                <BootstrapNavLink\n                                    to={route.route}\n                                    title={route.description}\n                                >\n                                    {route.name}\n                                </BootstrapNavLink>\n                            </NavDropdown.Item>\n                        ))}\n                </NavDropdown>\n            </Navbar.Brand>\n            <Nav>\n                {routes.map(route => (\n                    <Route path={route.route} key={route.route}>\n                        {(route.subroutes || []).map(subroute => {\n                            const fullroute = `${route.route}${subroute.route}`;\n                            return (\n                                <BootstrapNavLink\n                                    to={fullroute}\n                                    key={fullroute}\n                                    title={subroute.description}\n                                >\n                                    {subroute.name}\n                                </BootstrapNavLink>\n                            );\n                        })}\n                    </Route>\n                ))}\n            </Nav>\n        </Navbar>\n    );\n}\nHeader.propTypes = {\n    routes: PropTypes.arrayOf(\n        PropTypes.shape({\n            route: PropTypes.string.isRequired,\n            name: PropTypes.string.isRequired,\n            description: PropTypes.string,\n            subroutes: PropTypes.arrayOf(\n                PropTypes.shape({\n                    route: PropTypes.string.isRequired,\n                    name: PropTypes.string.isRequired,\n                    description: PropTypes.string\n                })\n            )\n        })\n    )\n};\n","import React from \"react\";\nimport { Header } from \"../../components/header\";\n\n/**\n * Header showing the routes that a user with `role=admin`\n * can see.\n *\n * @returns\n */\nfunction AdminHeader() {\n    return (\n        <Header\n            routes={[\n                {\n                    route: \"/tapp\",\n                    name: \"TAPP\",\n                    description: \"TAPP Main View\",\n                    subroutes: [\n                        {\n                            route: \"/sessions\",\n                            name: \"Sessions\",\n                            description: \"Manage Sessions\"\n                        },\n                        {\n                            route: \"/instructors\",\n                            name: \"Instructors\",\n                            description: \"Manage Instructors\"\n                        },\n                        {\n                            route: \"/positions\",\n                            name: \"Positions\",\n                            description: \"Manage Positions\"\n                        },\n                        {\n                            route: \"/assignments\",\n                            name: \"Assignments\",\n                            description: \"Manage Assignments\"\n                        },\n                        {\n                            route: \"/summary\",\n                            name: \"Summary\",\n                            description: \"Overivew of all data\"\n                        }\n                    ]\n                },\n                {\n                    route: \"/cp\",\n                    name: \"CP\",\n                    description: \"Contract Presentment\",\n                    subroutes: [\n                        {\n                            route: \"/statistics\",\n                            name: \"Statistics\",\n                            description:\n                                \"See statistics about accepted/rejected contracts\"\n                        }\n                    ]\n                },\n                {\n                    route: \"/dashboard\",\n                    name: \"Dashboard\",\n                    description: \"List of all widgets\",\n                    hidden: true\n                }\n            ]}\n        />\n    );\n}\n\nexport { AdminHeader };\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { setGlobals } from \"./views/globals/actions\";\nimport { parseURLSearchString } from \"./libs/urlUtils\";\nimport { runOnActiveSessionChange } from \"./api/actions/utils\";\nimport { setActiveSession } from \"./api/actions\";\nimport { ConnectedNotifications } from \"./views/notificatons\";\nimport { AdminRoutes } from \"./views/routes\";\nimport { AdminHeader } from \"./views/admin\";\n\nclass App extends React.Component {\n    componentDidMount() {\n        // Some special values can be persisted in the url search string.\n        // This is mainly for development with the mockAPI so that a page\n        // can be refreshed and appear in the same state that it was.\n        if (!window.location) {\n            return;\n        }\n        const newGlobals = parseURLSearchString(window.location.search);\n        this.props.setGlobals(newGlobals);\n\n        // Set up a special handler for when the active session changes. We want to store\n        // this in the URL string\n        runOnActiveSessionChange(() => async (dispatch, getState) => {\n            const state = getState();\n            const activeSession = state.model.sessions.activeSession;\n            const globals = state.ui.globals;\n            this.props.setGlobals({\n                ...globals,\n                activeSession: activeSession.id\n            });\n        });\n        // If there is an `activeSession` stored in globals, use it to set the active\n        // session now. (This is a one-time action)\n        if (newGlobals.activeSession != null) {\n            this.props.setActiveSession({ id: newGlobals.activeSession });\n        }\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                <AdminHeader />\n                <AdminRoutes />\n                <ConnectedNotifications />\n            </React.Fragment>\n        );\n    }\n}\n\nconst ConnectedApp = connect(\n    state => ({\n        globals: state.ui.globals\n    }),\n    { setGlobals, setActiveSession }\n)(App);\n\nexport default ConnectedApp;\n","import { SET_SELECTED_ROWS } from \"./constants\";\nimport { createReducer } from \"redux-create-reducer\";\n\n// initialize the state of offer table\nconst initialState = {\n    selectedAssignmentIds: []\n};\n\nconst offerTableReducer = createReducer(initialState, {\n    [SET_SELECTED_ROWS]: (state, action) => {\n        return { ...state, selectedAssignmentIds: action.payload };\n    }\n});\n\nexport default offerTableReducer;\n","import { createReducer } from \"redux-create-reducer\";\nimport { SET_GLOBALS } from \"./constants\";\n\nexport const globalReducer = createReducer(\n    {},\n    {\n        [SET_GLOBALS]: (state, action) => ({\n            ...action.payload\n        })\n    }\n);\n","export const SET_GLOBALS = \"SET_GLOBALS\";\n","import { createReducer } from \"./utils\";\nimport { API_INTERACTION_START, API_INTERACTION_END } from \"../constants\";\n\nconst initialState = {\n    ongoingInteraction: false,\n    ongoingInteractionsList: []\n};\n\n// Keep a list of all ongoing interactions that are in progress.\n// This way we could display a spinner or some-such while interactions\n// are going on. Interactions will be mostly network-based interactions.\nexport const statusReducer = createReducer(initialState, {\n    [API_INTERACTION_START]: (state, action) => ({\n        ...state,\n        ongoingInteraction: true,\n        ongoingInteractionsList: [\n            ...state.ongoingInteractionsList,\n            action.payload\n        ]\n    }),\n    [API_INTERACTION_END]: (state, action) => {\n        // remove the current interaction\n        const ongoingInteractionsList = state.ongoingInteractionsList.filter(\n            i => i.id !== action.payload.id\n        );\n        return {\n            ...state,\n            ongoingInteraction: ongoingInteractionsList.length > 0,\n            ongoingInteractionsList: ongoingInteractionsList\n        };\n    }\n});\n","import { reducer as formReducer } from \"redux-form\";\nimport { reducer as notificationReducer } from \"react-notification-system-redux\";\nimport { combineReducers } from \"./api/reducers/utils\";\nimport offerTableReducer from \"./views/offertable/reducers\";\nimport { globalReducer } from \"./views/globals/reducers\";\nimport {\n    statusReducer,\n    sessionsReducer,\n    positionsReducer,\n    applicantsReducer,\n    applicationsReducer,\n    assignmentsReducer,\n    instructorsReducer,\n    positionTemplatesReducer\n} from \"./api/reducers\";\n\n// When `combineReducers` is used,\n// every action gets dispatched to every reducer.\n// Since reducers don't change the state on unrecognized\n// actions, this is okay. Further, each reducer believes\n// it has its own top-level state, but in reality it is\n// just passed a part of the whole state. E.g., if `combineReducers`\n// is passed\n//   {\n//      mypath: myReducer\n//   }\n// When `myReducer(localState)` is called, `localSate == globalState.mypath`.\nconst reducer = combineReducers({\n    model: combineReducers({\n        status: statusReducer,\n        sessions: sessionsReducer,\n        positions: positionsReducer,\n        applicants: applicantsReducer,\n        applications: applicationsReducer,\n        assignments: assignmentsReducer,\n        instructors: instructorsReducer,\n        positionTemplates: positionTemplatesReducer\n    }),\n    ui: combineReducers({\n        notifications: notificationReducer,\n        form: formReducer,\n        offerTable: offerTableReducer,\n        globals: globalReducer\n    })\n});\n\nexport default reducer;\n","import { createStore, applyMiddleware } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport { persistStore, persistReducer } from \"redux-persist\";\nimport storage from \"redux-persist/lib/storage\";\nimport rootReducer from \"./rootReducer\";\nimport thunk from \"redux-thunk\";\n\n/* eslint-disable */\nconst configureStore = () => {\n    const persistConfig = {\n        key: \"root\",\n        storage,\n        whitelist: [\"auth\", \"application\"]\n    };\n    const persistedReducer = persistReducer(persistConfig, rootReducer);\n    const store = createStore(\n        persistedReducer,\n        composeWithDevTools(applyMiddleware(thunk))\n    );\n    const persistor = persistStore(store);\n\n    if (process.env.NODE_ENV !== \"production\") {\n        if (module.hot) {\n            module.hot.accept(\"./rootReducer\", () => {\n                store.replaceReducer(persistedReducer);\n            });\n        }\n    }\n\n    return { store, persistor };\n};\n/* eslint-enable */\n\nexport default configureStore;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { HashRouter } from \"react-router-dom\";\nimport { PersistGate } from \"redux-persist/integration/react\";\nimport { DevFrame as _DevFrame } from \"./views/dev_frame\";\nimport \"./styles/sass/main.scss\";\nimport App from \"./App\";\nimport configureStore from \"./store\";\n\nconst { store, persistor } = configureStore();\n\n// In production, we don't want to wrap the app in a dev frame,\n// but we do want to in development\nlet DevFrame = function(props) {\n    return <React.Fragment>{props.children}</React.Fragment>;\n};\n/* eslint-disable */\nif (process.env.REACT_APP_DEV_FEATURES) {\n    DevFrame = _DevFrame;\n}\n/* eslint-enable */\n\nconst render = Component => {\n    return ReactDOM.render(\n        <HashRouter>\n            <Provider store={store}>\n                <DevFrame>\n                    <PersistGate persistor={persistor}>\n                        <Component />\n                    </PersistGate>\n                </DevFrame>\n            </Provider>\n        </HashRouter>,\n        document.getElementById(\"root\")\n    );\n};\n\nrender(App);\n\n// Hot module reloading\n// https://medium.com/@brianhan/hot-reloading-cra-without-eject-b54af352c642\n\n/*eslint-disable */\nif (module.hot) {\n    module.hot.accept(\"./App\", () => {\n        const NextApp = require(\"./App\").default;\n        render(NextApp);\n    });\n}\n/*eslint-enable */\n"],"sourceRoot":""}